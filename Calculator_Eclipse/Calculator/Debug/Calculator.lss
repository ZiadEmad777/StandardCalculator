
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000249c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  0000249c  00002510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001d88  00000000  00000000  00002574  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c63  00000000  00000000  000042fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000509f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000520f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007d43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008af0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000096ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3c       	cpi	r26, 0xC4	; 196
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 1c 06 	call	0xc38	; 0xc38 <main>
      7a:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 e4 11 	jmp	0x23c8	; 0x23c8 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ac eb       	ldi	r26, 0xBC	; 188
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 00 12 	jmp	0x2400	; 0x2400 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 e4 11 	jmp	0x23c8	; 0x23c8 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8c eb       	ldi	r24, 0xBC	; 188
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 00 12 	jmp	0x2400	; 0x2400 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <Calculations>:
[Arguments]    	: This function Take the operator type (+\-\*\/) and the two numbers which user entered.
[Returns]      	: This Function return the result of the mathematical operation.

 ****************************************************************************************************/
uint16 Calculations(char Op,uint16 NUM1,uint16 NUM2)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2a 97       	sbiw	r28, 0x0a	; 10
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8a 83       	std	Y+2, r24	; 0x02
     b4c:	7c 83       	std	Y+4, r23	; 0x04
     b4e:	6b 83       	std	Y+3, r22	; 0x03
     b50:	5e 83       	std	Y+6, r21	; 0x06
     b52:	4d 83       	std	Y+5, r20	; 0x05
	uint8 result;
	switch (Op) {
     b54:	8a 81       	ldd	r24, Y+2	; 0x02
     b56:	28 2f       	mov	r18, r24
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	3a 87       	std	Y+10, r19	; 0x0a
     b5c:	29 87       	std	Y+9, r18	; 0x09
     b5e:	49 85       	ldd	r20, Y+9	; 0x09
     b60:	5a 85       	ldd	r21, Y+10	; 0x0a
     b62:	4a 32       	cpi	r20, 0x2A	; 42
     b64:	51 05       	cpc	r21, r1
     b66:	01 f1       	breq	.+64     	; 0xba8 <Calculations+0x72>
     b68:	89 85       	ldd	r24, Y+9	; 0x09
     b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b6c:	8b 32       	cpi	r24, 0x2B	; 43
     b6e:	91 05       	cpc	r25, r1
     b70:	34 f4       	brge	.+12     	; 0xb7e <Calculations+0x48>
     b72:	29 85       	ldd	r18, Y+9	; 0x09
     b74:	3a 85       	ldd	r19, Y+10	; 0x0a
     b76:	25 32       	cpi	r18, 0x25	; 37
     b78:	31 05       	cpc	r19, r1
     b7a:	21 f1       	breq	.+72     	; 0xbc4 <Calculations+0x8e>
     b7c:	4d c0       	rjmp	.+154    	; 0xc18 <Calculations+0xe2>
     b7e:	49 85       	ldd	r20, Y+9	; 0x09
     b80:	5a 85       	ldd	r21, Y+10	; 0x0a
     b82:	4b 32       	cpi	r20, 0x2B	; 43
     b84:	51 05       	cpc	r21, r1
     b86:	31 f0       	breq	.+12     	; 0xb94 <Calculations+0x5e>
     b88:	89 85       	ldd	r24, Y+9	; 0x09
     b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b8c:	8d 32       	cpi	r24, 0x2D	; 45
     b8e:	91 05       	cpc	r25, r1
     b90:	31 f0       	breq	.+12     	; 0xb9e <Calculations+0x68>
     b92:	42 c0       	rjmp	.+132    	; 0xc18 <Calculations+0xe2>
	case '+':
		result= (NUM1) + (NUM2);
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	9d 81       	ldd	r25, Y+5	; 0x05
     b98:	89 0f       	add	r24, r25
     b9a:	89 83       	std	Y+1, r24	; 0x01
     b9c:	3d c0       	rjmp	.+122    	; 0xc18 <Calculations+0xe2>
		break;
	case '-':
		result= (NUM1) - (NUM2);
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	9d 81       	ldd	r25, Y+5	; 0x05
     ba2:	89 1b       	sub	r24, r25
     ba4:	89 83       	std	Y+1, r24	; 0x01
     ba6:	38 c0       	rjmp	.+112    	; 0xc18 <Calculations+0xe2>
		break;
	case '*':
		result= (uint16)( (NUM1) * (NUM2) );
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	9c 81       	ldd	r25, Y+4	; 0x04
     bac:	2d 81       	ldd	r18, Y+5	; 0x05
     bae:	3e 81       	ldd	r19, Y+6	; 0x06
     bb0:	ac 01       	movw	r20, r24
     bb2:	42 9f       	mul	r20, r18
     bb4:	c0 01       	movw	r24, r0
     bb6:	43 9f       	mul	r20, r19
     bb8:	90 0d       	add	r25, r0
     bba:	52 9f       	mul	r21, r18
     bbc:	90 0d       	add	r25, r0
     bbe:	11 24       	eor	r1, r1
     bc0:	89 83       	std	Y+1, r24	; 0x01
     bc2:	2a c0       	rjmp	.+84     	; 0xc18 <Calculations+0xe2>
		break;
	case '%':
		if (NUM2 != 0) {
     bc4:	8d 81       	ldd	r24, Y+5	; 0x05
     bc6:	9e 81       	ldd	r25, Y+6	; 0x06
     bc8:	00 97       	sbiw	r24, 0x00	; 0
     bca:	51 f0       	breq	.+20     	; 0xbe0 <Calculations+0xaa>
			result= ((uint16)(NUM1)) / (NUM2);
     bcc:	8b 81       	ldd	r24, Y+3	; 0x03
     bce:	9c 81       	ldd	r25, Y+4	; 0x04
     bd0:	2d 81       	ldd	r18, Y+5	; 0x05
     bd2:	3e 81       	ldd	r19, Y+6	; 0x06
     bd4:	b9 01       	movw	r22, r18
     bd6:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__udivmodhi4>
     bda:	cb 01       	movw	r24, r22
     bdc:	89 83       	std	Y+1, r24	; 0x01
     bde:	1c c0       	rjmp	.+56     	; 0xc18 <Calculations+0xe2>
		}
		else {
			/*to clear the calculation process entered
			 * overwrite on the numbers by space character
			 * then move the cursor to row 2 col 0*/
			LCD_displayStringRowColumn(1, 0, "                ");
     be0:	20 e6       	ldi	r18, 0x60	; 96
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	a9 01       	movw	r20, r18
     bea:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(2, 0, "                ");
     bee:	20 e6       	ldi	r18, 0x60	; 96
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	82 e0       	ldi	r24, 0x02	; 2
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	a9 01       	movw	r20, r18
     bf8:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 0);
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	0e 94 48 11 	call	0x2290	; 0x2290 <LCD_moveCursor>
			LCD_displayStringRowColumn(1,0, "ERROR: DIV BY 0");
     c04:	21 e7       	ldi	r18, 0x71	; 113
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	a9 01       	movw	r20, r18
     c0e:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_displayStringRowColumn>
			return 0;
     c12:	18 86       	std	Y+8, r1	; 0x08
     c14:	1f 82       	std	Y+7, r1	; 0x07
     c16:	05 c0       	rjmp	.+10     	; 0xc22 <Calculations+0xec>
		}

		break;
	}
	return result;
     c18:	89 81       	ldd	r24, Y+1	; 0x01
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	38 87       	std	Y+8, r19	; 0x08
     c20:	2f 83       	std	Y+7, r18	; 0x07
     c22:	8f 81       	ldd	r24, Y+7	; 0x07
     c24:	98 85       	ldd	r25, Y+8	; 0x08
}
     c26:	2a 96       	adiw	r28, 0x0a	; 10
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	de bf       	out	0x3e, r29	; 62
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	cd bf       	out	0x3d, r28	; 61
     c32:	cf 91       	pop	r28
     c34:	df 91       	pop	r29
     c36:	08 95       	ret

00000c38 <main>:



int main(){
     c38:	df 93       	push	r29
     c3a:	cf 93       	push	r28
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	a8 97       	sbiw	r28, 0x28	; 40
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	de bf       	out	0x3e, r29	; 62
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	cd bf       	out	0x3d, r28	; 61
	/*******************************************************************************
	 *                        Variables of the main Function                       *
	 *******************************************************************************/
	uint8  key=0;
     c4c:	1e a2       	std	Y+38, r1	; 0x26
	uint8  operator=0;
     c4e:	1d a2       	std	Y+37, r1	; 0x25
	uint16 firstOperand=0;
     c50:	1c a2       	std	Y+36, r1	; 0x24
     c52:	1b a2       	std	Y+35, r1	; 0x23
	uint16 secondOperand=0;
     c54:	1a a2       	std	Y+34, r1	; 0x22
     c56:	19 a2       	std	Y+33, r1	; 0x21
	uint16 secondOperatorFlag=0;
     c58:	18 a2       	std	Y+32, r1	; 0x20
     c5a:	1f 8e       	std	Y+31, r1	; 0x1f
	uint16 Result=0;
     c5c:	1e 8e       	std	Y+30, r1	; 0x1e
     c5e:	1d 8e       	std	Y+29, r1	; 0x1d

	/*******************************************************************************
	 *               Introduction texts in the beginning of the program.           *
	 *******************************************************************************/
	/*Initialize the LCD*/
	LCD_init();
     c60:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_init>

	/*Clear the screen for next string*/
	LCD_clearScreen();
     c64:	0e 94 c6 11 	call	0x238c	; 0x238c <LCD_clearScreen>

	/*display string in row 0 and col 0 contain "Welcome to"*/
	LCD_displayStringRowColumn(0,3,"Welcome to");
     c68:	21 e8       	ldi	r18, 0x81	; 129
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	63 e0       	ldi	r22, 0x03	; 3
     c70:	a9 01       	movw	r20, r18
     c72:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_displayStringRowColumn>

	/*display string in row 1 and col 5 contain "Ziad's"*/
	LCD_displayStringRowColumn(1,5,"Ziad's");
     c76:	2c e8       	ldi	r18, 0x8C	; 140
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	65 e0       	ldi	r22, 0x05	; 5
     c7e:	a9 01       	movw	r20, r18
     c80:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_displayStringRowColumn>

	/*display string in row 2 and col 3 contain "Calculator"*/
	LCD_displayStringRowColumn(2,3,"Calculator");
     c84:	23 e9       	ldi	r18, 0x93	; 147
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	63 e0       	ldi	r22, 0x03	; 3
     c8c:	a9 01       	movw	r20, r18
     c8e:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_displayStringRowColumn>
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e8       	ldi	r25, 0x80	; 128
     c96:	ab e3       	ldi	r26, 0x3B	; 59
     c98:	b4 e4       	ldi	r27, 0x44	; 68
     c9a:	89 8f       	std	Y+25, r24	; 0x19
     c9c:	9a 8f       	std	Y+26, r25	; 0x1a
     c9e:	ab 8f       	std	Y+27, r26	; 0x1b
     ca0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ca2:	69 8d       	ldd	r22, Y+25	; 0x19
     ca4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ca6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ca8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	4a e7       	ldi	r20, 0x7A	; 122
     cb0:	53 e4       	ldi	r21, 0x43	; 67
     cb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cb6:	dc 01       	movw	r26, r24
     cb8:	cb 01       	movw	r24, r22
     cba:	8d 8b       	std	Y+21, r24	; 0x15
     cbc:	9e 8b       	std	Y+22, r25	; 0x16
     cbe:	af 8b       	std	Y+23, r26	; 0x17
     cc0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cc2:	6d 89       	ldd	r22, Y+21	; 0x15
     cc4:	7e 89       	ldd	r23, Y+22	; 0x16
     cc6:	8f 89       	ldd	r24, Y+23	; 0x17
     cc8:	98 8d       	ldd	r25, Y+24	; 0x18
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 e8       	ldi	r20, 0x80	; 128
     cd0:	5f e3       	ldi	r21, 0x3F	; 63
     cd2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     cd6:	88 23       	and	r24, r24
     cd8:	2c f4       	brge	.+10     	; 0xce4 <main+0xac>
		__ticks = 1;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	9c 8b       	std	Y+20, r25	; 0x14
     ce0:	8b 8b       	std	Y+19, r24	; 0x13
     ce2:	3f c0       	rjmp	.+126    	; 0xd62 <main+0x12a>
	else if (__tmp > 65535)
     ce4:	6d 89       	ldd	r22, Y+21	; 0x15
     ce6:	7e 89       	ldd	r23, Y+22	; 0x16
     ce8:	8f 89       	ldd	r24, Y+23	; 0x17
     cea:	98 8d       	ldd	r25, Y+24	; 0x18
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	3f ef       	ldi	r19, 0xFF	; 255
     cf0:	4f e7       	ldi	r20, 0x7F	; 127
     cf2:	57 e4       	ldi	r21, 0x47	; 71
     cf4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     cf8:	18 16       	cp	r1, r24
     cfa:	4c f5       	brge	.+82     	; 0xd4e <main+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cfc:	69 8d       	ldd	r22, Y+25	; 0x19
     cfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d00:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d02:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e2       	ldi	r20, 0x20	; 32
     d0a:	51 e4       	ldi	r21, 0x41	; 65
     d0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	bc 01       	movw	r22, r24
     d16:	cd 01       	movw	r24, r26
     d18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	9c 8b       	std	Y+20, r25	; 0x14
     d22:	8b 8b       	std	Y+19, r24	; 0x13
     d24:	0f c0       	rjmp	.+30     	; 0xd44 <main+0x10c>
     d26:	89 e1       	ldi	r24, 0x19	; 25
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	9a 8b       	std	Y+18, r25	; 0x12
     d2c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d2e:	89 89       	ldd	r24, Y+17	; 0x11
     d30:	9a 89       	ldd	r25, Y+18	; 0x12
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	f1 f7       	brne	.-4      	; 0xd32 <main+0xfa>
     d36:	9a 8b       	std	Y+18, r25	; 0x12
     d38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d3a:	8b 89       	ldd	r24, Y+19	; 0x13
     d3c:	9c 89       	ldd	r25, Y+20	; 0x14
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	9c 8b       	std	Y+20, r25	; 0x14
     d42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d44:	8b 89       	ldd	r24, Y+19	; 0x13
     d46:	9c 89       	ldd	r25, Y+20	; 0x14
     d48:	00 97       	sbiw	r24, 0x00	; 0
     d4a:	69 f7       	brne	.-38     	; 0xd26 <main+0xee>
     d4c:	14 c0       	rjmp	.+40     	; 0xd76 <main+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d4e:	6d 89       	ldd	r22, Y+21	; 0x15
     d50:	7e 89       	ldd	r23, Y+22	; 0x16
     d52:	8f 89       	ldd	r24, Y+23	; 0x17
     d54:	98 8d       	ldd	r25, Y+24	; 0x18
     d56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d5a:	dc 01       	movw	r26, r24
     d5c:	cb 01       	movw	r24, r22
     d5e:	9c 8b       	std	Y+20, r25	; 0x14
     d60:	8b 8b       	std	Y+19, r24	; 0x13
     d62:	8b 89       	ldd	r24, Y+19	; 0x13
     d64:	9c 89       	ldd	r25, Y+20	; 0x14
     d66:	98 8b       	std	Y+16, r25	; 0x10
     d68:	8f 87       	std	Y+15, r24	; 0x0f
     d6a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d6c:	98 89       	ldd	r25, Y+16	; 0x10
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	f1 f7       	brne	.-4      	; 0xd6e <main+0x136>
     d72:	98 8b       	std	Y+16, r25	; 0x10
     d74:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(750);

	/*Clear the screen for next string*/
	LCD_clearScreen();
     d76:	0e 94 c6 11 	call	0x238c	; 0x238c <LCD_clearScreen>
	/*Display in the first two rows an introduction to our calculator*/
	/*putting word "standard" in the first row and first col*/
	LCD_displayStringRowColumn(0,0,"Standard");
     d7a:	2e e9       	ldi	r18, 0x9E	; 158
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	a9 01       	movw	r20, r18
     d84:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_displayStringRowColumn>
	/*putting word "Calculator" in the second row and first col*/
	LCD_displayStringRowColumn(0,12,"Calc");
     d88:	27 ea       	ldi	r18, 0xA7	; 167
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	6c e0       	ldi	r22, 0x0C	; 12
     d90:	a9 01       	movw	r20, r18
     d92:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_displayStringRowColumn>
	/* Move the cursor to the third row */
	LCD_moveCursor(1,0);
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	0e 94 48 11 	call	0x2290	; 0x2290 <LCD_moveCursor>
	 *               Infinite loop which contain the calculation process            *
	 *******************************************************************************/
	while(1)
	{
		/*Receive the number from the user*/
		key=KEYPAD_getPressedKey();
     d9e:	0e 94 1a 0b 	call	0x1634	; 0x1634 <KEYPAD_getPressedKey>
     da2:	8e a3       	std	Y+38, r24	; 0x26


		if( (key >= 0) && (key <= 9) )
     da4:	8e a1       	ldd	r24, Y+38	; 0x26
     da6:	8a 30       	cpi	r24, 0x0A	; 10
     da8:	08 f0       	brcs	.+2      	; 0xdac <main+0x174>
     daa:	40 c0       	rjmp	.+128    	; 0xe2c <main+0x1f4>
		{

			switch (secondOperatorFlag)
     dac:	8f 8d       	ldd	r24, Y+31	; 0x1f
     dae:	98 a1       	ldd	r25, Y+32	; 0x20
     db0:	98 a7       	std	Y+40, r25	; 0x28
     db2:	8f a3       	std	Y+39, r24	; 0x27
     db4:	8f a1       	ldd	r24, Y+39	; 0x27
     db6:	98 a5       	ldd	r25, Y+40	; 0x28
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	31 f0       	breq	.+12     	; 0xdc8 <main+0x190>
     dbc:	8f a1       	ldd	r24, Y+39	; 0x27
     dbe:	98 a5       	ldd	r25, Y+40	; 0x28
     dc0:	81 30       	cpi	r24, 0x01	; 1
     dc2:	91 05       	cpc	r25, r1
     dc4:	d1 f0       	breq	.+52     	; 0xdfa <main+0x1c2>
     dc6:	85 c0       	rjmp	.+266    	; 0xed2 <main+0x29a>

			case 0:
				/*Display on the screen the number entered.
				 * then delay for 20ms.
				 * then put the value of the key in the first operand variable*/
				LCD_intgerToString(key);
     dc8:	8e a1       	ldd	r24, Y+38	; 0x26
     dca:	88 2f       	mov	r24, r24
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 a3 11 	call	0x2346	; 0x2346 <LCD_intgerToString>
				firstOperand = ((firstOperand)*10)+key;
     dd2:	8b a1       	ldd	r24, Y+35	; 0x23
     dd4:	9c a1       	ldd	r25, Y+36	; 0x24
     dd6:	9c 01       	movw	r18, r24
     dd8:	22 0f       	add	r18, r18
     dda:	33 1f       	adc	r19, r19
     ddc:	c9 01       	movw	r24, r18
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	28 0f       	add	r18, r24
     de8:	39 1f       	adc	r19, r25
     dea:	8e a1       	ldd	r24, Y+38	; 0x26
     dec:	88 2f       	mov	r24, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	82 0f       	add	r24, r18
     df2:	93 1f       	adc	r25, r19
     df4:	9c a3       	std	Y+36, r25	; 0x24
     df6:	8b a3       	std	Y+35, r24	; 0x23
     df8:	6c c0       	rjmp	.+216    	; 0xed2 <main+0x29a>

			case 1:
				/*Display on the screen the number entered.
				 * then delay for 20ms.
				 * then put the value of the key in the second operand variable*/
				LCD_intgerToString(key);
     dfa:	8e a1       	ldd	r24, Y+38	; 0x26
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 a3 11 	call	0x2346	; 0x2346 <LCD_intgerToString>
				secondOperand= ((secondOperand)*10)+key;
     e04:	89 a1       	ldd	r24, Y+33	; 0x21
     e06:	9a a1       	ldd	r25, Y+34	; 0x22
     e08:	9c 01       	movw	r18, r24
     e0a:	22 0f       	add	r18, r18
     e0c:	33 1f       	adc	r19, r19
     e0e:	c9 01       	movw	r24, r18
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	28 0f       	add	r18, r24
     e1a:	39 1f       	adc	r19, r25
     e1c:	8e a1       	ldd	r24, Y+38	; 0x26
     e1e:	88 2f       	mov	r24, r24
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	82 0f       	add	r24, r18
     e24:	93 1f       	adc	r25, r19
     e26:	9a a3       	std	Y+34, r25	; 0x22
     e28:	89 a3       	std	Y+33, r24	; 0x21
     e2a:	53 c0       	rjmp	.+166    	; 0xed2 <main+0x29a>
				break;
			}
		}
		else if ((key == '+') || (key == '-') || (key == '*') || (key == '%'))
     e2c:	8e a1       	ldd	r24, Y+38	; 0x26
     e2e:	8b 32       	cpi	r24, 0x2B	; 43
     e30:	49 f0       	breq	.+18     	; 0xe44 <main+0x20c>
     e32:	8e a1       	ldd	r24, Y+38	; 0x26
     e34:	8d 32       	cpi	r24, 0x2D	; 45
     e36:	31 f0       	breq	.+12     	; 0xe44 <main+0x20c>
     e38:	8e a1       	ldd	r24, Y+38	; 0x26
     e3a:	8a 32       	cpi	r24, 0x2A	; 42
     e3c:	19 f0       	breq	.+6      	; 0xe44 <main+0x20c>
     e3e:	8e a1       	ldd	r24, Y+38	; 0x26
     e40:	85 32       	cpi	r24, 0x25	; 37
     e42:	51 f4       	brne	.+20     	; 0xe58 <main+0x220>
		{
			/* then put the value of the key in the operator variable*/
			operator=key;
     e44:	8e a1       	ldd	r24, Y+38	; 0x26
     e46:	8d a3       	std	Y+37, r24	; 0x25
			/*CHANGE FLAGE INTO HIGH TO BE READY FOR SECOND OPERAND*/
			secondOperatorFlag=1;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	98 a3       	std	Y+32, r25	; 0x20
     e4e:	8f 8f       	std	Y+31, r24	; 0x1f
			/*Display on the screen the number entered.*/
			LCD_displayCharacter(key);
     e50:	8e a1       	ldd	r24, Y+38	; 0x26
     e52:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <LCD_displayCharacter>
     e56:	3d c0       	rjmp	.+122    	; 0xed2 <main+0x29a>
		}
		else if (key == '=')
     e58:	8e a1       	ldd	r24, Y+38	; 0x26
     e5a:	8d 33       	cpi	r24, 0x3D	; 61
     e5c:	e1 f4       	brne	.+56     	; 0xe96 <main+0x25e>
		{
			Result=Calculations(operator,firstOperand,secondOperand);
     e5e:	2b a1       	ldd	r18, Y+35	; 0x23
     e60:	3c a1       	ldd	r19, Y+36	; 0x24
     e62:	49 a1       	ldd	r20, Y+33	; 0x21
     e64:	5a a1       	ldd	r21, Y+34	; 0x22
     e66:	8d a1       	ldd	r24, Y+37	; 0x25
     e68:	b9 01       	movw	r22, r18
     e6a:	0e 94 9b 05 	call	0xb36	; 0xb36 <Calculations>
     e6e:	9e 8f       	std	Y+30, r25	; 0x1e
     e70:	8d 8f       	std	Y+29, r24	; 0x1d

			/*Display on the screen the number entered.*/
			LCD_displayCharacter(key);
     e72:	8e a1       	ldd	r24, Y+38	; 0x26
     e74:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <LCD_displayCharacter>

			/*put the result in row 3 col 0*/
			LCD_moveCursor(2, 0);
     e78:	82 e0       	ldi	r24, 0x02	; 2
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	0e 94 48 11 	call	0x2290	; 0x2290 <LCD_moveCursor>

			/*Display on the screen the result of the calculation.*/
			LCD_intgerToString(Result);
     e80:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e82:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e84:	0e 94 a3 11 	call	0x2346	; 0x2346 <LCD_intgerToString>

			/*reset the variables*/
			firstOperand= Result;
     e88:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e8c:	9c a3       	std	Y+36, r25	; 0x24
     e8e:	8b a3       	std	Y+35, r24	; 0x23
			secondOperand=0;
     e90:	1a a2       	std	Y+34, r1	; 0x22
     e92:	19 a2       	std	Y+33, r1	; 0x21
     e94:	1e c0       	rjmp	.+60     	; 0xed2 <main+0x29a>

		}
		else if (key == 13)
     e96:	8e a1       	ldd	r24, Y+38	; 0x26
     e98:	8d 30       	cpi	r24, 0x0D	; 13
     e9a:	d9 f4       	brne	.+54     	; 0xed2 <main+0x29a>
		{

			/* Reset variables and display initial state */
			firstOperand= 0;
     e9c:	1c a2       	std	Y+36, r1	; 0x24
     e9e:	1b a2       	std	Y+35, r1	; 0x23
			secondOperand=0;
     ea0:	1a a2       	std	Y+34, r1	; 0x22
     ea2:	19 a2       	std	Y+33, r1	; 0x21
			Result=0;
     ea4:	1e 8e       	std	Y+30, r1	; 0x1e
     ea6:	1d 8e       	std	Y+29, r1	; 0x1d
			operator=0;
     ea8:	1d a2       	std	Y+37, r1	; 0x25
			secondOperatorFlag=0;
     eaa:	18 a2       	std	Y+32, r1	; 0x20
     eac:	1f 8e       	std	Y+31, r1	; 0x1f

			/*to clear the calculation process entered
			 * overwrite on the numbers by space character
			 * then move the cursor to row 2 col 0*/
			LCD_displayStringRowColumn(1, 0, "               ");
     eae:	2c ea       	ldi	r18, 0xAC	; 172
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	a9 01       	movw	r20, r18
     eb8:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(2, 0, "               ");
     ebc:	2c ea       	ldi	r18, 0xAC	; 172
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	82 e0       	ldi	r24, 0x02	; 2
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	a9 01       	movw	r20, r18
     ec6:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 0);
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	0e 94 48 11 	call	0x2290	; 0x2290 <LCD_moveCursor>
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	a6 e9       	ldi	r26, 0x96	; 150
     ed8:	b3 e4       	ldi	r27, 0x43	; 67
     eda:	8b 87       	std	Y+11, r24	; 0x0b
     edc:	9c 87       	std	Y+12, r25	; 0x0c
     ede:	ad 87       	std	Y+13, r26	; 0x0d
     ee0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	4a e7       	ldi	r20, 0x7A	; 122
     ef0:	53 e4       	ldi	r21, 0x43	; 67
     ef2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	8f 83       	std	Y+7, r24	; 0x07
     efc:	98 87       	std	Y+8, r25	; 0x08
     efe:	a9 87       	std	Y+9, r26	; 0x09
     f00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f02:	6f 81       	ldd	r22, Y+7	; 0x07
     f04:	78 85       	ldd	r23, Y+8	; 0x08
     f06:	89 85       	ldd	r24, Y+9	; 0x09
     f08:	9a 85       	ldd	r25, Y+10	; 0x0a
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	40 e8       	ldi	r20, 0x80	; 128
     f10:	5f e3       	ldi	r21, 0x3F	; 63
     f12:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f16:	88 23       	and	r24, r24
     f18:	2c f4       	brge	.+10     	; 0xf24 <main+0x2ec>
		__ticks = 1;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	9e 83       	std	Y+6, r25	; 0x06
     f20:	8d 83       	std	Y+5, r24	; 0x05
     f22:	3f c0       	rjmp	.+126    	; 0xfa2 <main+0x36a>
	else if (__tmp > 65535)
     f24:	6f 81       	ldd	r22, Y+7	; 0x07
     f26:	78 85       	ldd	r23, Y+8	; 0x08
     f28:	89 85       	ldd	r24, Y+9	; 0x09
     f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	3f ef       	ldi	r19, 0xFF	; 255
     f30:	4f e7       	ldi	r20, 0x7F	; 127
     f32:	57 e4       	ldi	r21, 0x47	; 71
     f34:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f38:	18 16       	cp	r1, r24
     f3a:	4c f5       	brge	.+82     	; 0xf8e <main+0x356>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f40:	8d 85       	ldd	r24, Y+13	; 0x0d
     f42:	9e 85       	ldd	r25, Y+14	; 0x0e
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	40 e2       	ldi	r20, 0x20	; 32
     f4a:	51 e4       	ldi	r21, 0x41	; 65
     f4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	bc 01       	movw	r22, r24
     f56:	cd 01       	movw	r24, r26
     f58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	9e 83       	std	Y+6, r25	; 0x06
     f62:	8d 83       	std	Y+5, r24	; 0x05
     f64:	0f c0       	rjmp	.+30     	; 0xf84 <main+0x34c>
     f66:	89 e1       	ldi	r24, 0x19	; 25
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	9c 83       	std	Y+4, r25	; 0x04
     f6c:	8b 83       	std	Y+3, r24	; 0x03
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	9c 81       	ldd	r25, Y+4	; 0x04
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <main+0x33a>
     f76:	9c 83       	std	Y+4, r25	; 0x04
     f78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f7a:	8d 81       	ldd	r24, Y+5	; 0x05
     f7c:	9e 81       	ldd	r25, Y+6	; 0x06
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	9e 83       	std	Y+6, r25	; 0x06
     f82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f84:	8d 81       	ldd	r24, Y+5	; 0x05
     f86:	9e 81       	ldd	r25, Y+6	; 0x06
     f88:	00 97       	sbiw	r24, 0x00	; 0
     f8a:	69 f7       	brne	.-38     	; 0xf66 <main+0x32e>
     f8c:	08 cf       	rjmp	.-496    	; 0xd9e <main+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8e:	6f 81       	ldd	r22, Y+7	; 0x07
     f90:	78 85       	ldd	r23, Y+8	; 0x08
     f92:	89 85       	ldd	r24, Y+9	; 0x09
     f94:	9a 85       	ldd	r25, Y+10	; 0x0a
     f96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	9e 83       	std	Y+6, r25	; 0x06
     fa0:	8d 83       	std	Y+5, r24	; 0x05
     fa2:	8d 81       	ldd	r24, Y+5	; 0x05
     fa4:	9e 81       	ldd	r25, Y+6	; 0x06
     fa6:	9a 83       	std	Y+2, r25	; 0x02
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <main+0x376>
     fb2:	9a 83       	std	Y+2, r25	; 0x02
     fb4:	89 83       	std	Y+1, r24	; 0x01
     fb6:	f3 ce       	rjmp	.-538    	; 0xd9e <main+0x166>

00000fb8 <GPIO_setupPinDirection>:
				  if the input port number or pin number are not correct, The function will not handle the request.
[Arguments]    	: This Function take port number , pin number and direction of the pin
[Returns]      	: This Function return nothing.
****************************************************************************************************/
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	00 d0       	rcall	.+0      	; 0xfbe <GPIO_setupPinDirection+0x6>
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <GPIO_setupPinDirection+0x8>
     fc0:	0f 92       	push	r0
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	6a 83       	std	Y+2, r22	; 0x02
     fca:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	88 30       	cpi	r24, 0x08	; 8
     fd0:	08 f0       	brcs	.+2      	; 0xfd4 <GPIO_setupPinDirection+0x1c>
     fd2:	d5 c0       	rjmp	.+426    	; 0x117e <GPIO_setupPinDirection+0x1c6>
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	84 30       	cpi	r24, 0x04	; 4
     fd8:	08 f0       	brcs	.+2      	; 0xfdc <GPIO_setupPinDirection+0x24>
     fda:	d1 c0       	rjmp	.+418    	; 0x117e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	3d 83       	std	Y+5, r19	; 0x05
     fe4:	2c 83       	std	Y+4, r18	; 0x04
     fe6:	8c 81       	ldd	r24, Y+4	; 0x04
     fe8:	9d 81       	ldd	r25, Y+5	; 0x05
     fea:	81 30       	cpi	r24, 0x01	; 1
     fec:	91 05       	cpc	r25, r1
     fee:	09 f4       	brne	.+2      	; 0xff2 <GPIO_setupPinDirection+0x3a>
     ff0:	43 c0       	rjmp	.+134    	; 0x1078 <GPIO_setupPinDirection+0xc0>
     ff2:	2c 81       	ldd	r18, Y+4	; 0x04
     ff4:	3d 81       	ldd	r19, Y+5	; 0x05
     ff6:	22 30       	cpi	r18, 0x02	; 2
     ff8:	31 05       	cpc	r19, r1
     ffa:	2c f4       	brge	.+10     	; 0x1006 <GPIO_setupPinDirection+0x4e>
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	71 f0       	breq	.+28     	; 0x1020 <GPIO_setupPinDirection+0x68>
    1004:	bc c0       	rjmp	.+376    	; 0x117e <GPIO_setupPinDirection+0x1c6>
    1006:	2c 81       	ldd	r18, Y+4	; 0x04
    1008:	3d 81       	ldd	r19, Y+5	; 0x05
    100a:	22 30       	cpi	r18, 0x02	; 2
    100c:	31 05       	cpc	r19, r1
    100e:	09 f4       	brne	.+2      	; 0x1012 <GPIO_setupPinDirection+0x5a>
    1010:	5f c0       	rjmp	.+190    	; 0x10d0 <GPIO_setupPinDirection+0x118>
    1012:	8c 81       	ldd	r24, Y+4	; 0x04
    1014:	9d 81       	ldd	r25, Y+5	; 0x05
    1016:	83 30       	cpi	r24, 0x03	; 3
    1018:	91 05       	cpc	r25, r1
    101a:	09 f4       	brne	.+2      	; 0x101e <GPIO_setupPinDirection+0x66>
    101c:	85 c0       	rjmp	.+266    	; 0x1128 <GPIO_setupPinDirection+0x170>
    101e:	af c0       	rjmp	.+350    	; 0x117e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	a1 f4       	brne	.+40     	; 0x104e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1026:	aa e3       	ldi	r26, 0x3A	; 58
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	ea e3       	ldi	r30, 0x3A	; 58
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <GPIO_setupPinDirection+0x8c>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <GPIO_setupPinDirection+0x88>
    1048:	84 2b       	or	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	98 c0       	rjmp	.+304    	; 0x117e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    104e:	aa e3       	ldi	r26, 0x3A	; 58
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	ea e3       	ldi	r30, 0x3A	; 58
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <GPIO_setupPinDirection+0xb4>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <GPIO_setupPinDirection+0xb0>
    1070:	80 95       	com	r24
    1072:	84 23       	and	r24, r20
    1074:	8c 93       	st	X, r24
    1076:	83 c0       	rjmp	.+262    	; 0x117e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	81 30       	cpi	r24, 0x01	; 1
    107c:	a1 f4       	brne	.+40     	; 0x10a6 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    107e:	a7 e3       	ldi	r26, 0x37	; 55
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e7 e3       	ldi	r30, 0x37	; 55
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	02 2e       	mov	r0, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <GPIO_setupPinDirection+0xe4>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	0a 94       	dec	r0
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <GPIO_setupPinDirection+0xe0>
    10a0:	84 2b       	or	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	6c c0       	rjmp	.+216    	; 0x117e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    10a6:	a7 e3       	ldi	r26, 0x37	; 55
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e7 e3       	ldi	r30, 0x37	; 55
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <GPIO_setupPinDirection+0x10c>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <GPIO_setupPinDirection+0x108>
    10c8:	80 95       	com	r24
    10ca:	84 23       	and	r24, r20
    10cc:	8c 93       	st	X, r24
    10ce:	57 c0       	rjmp	.+174    	; 0x117e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	a1 f4       	brne	.+40     	; 0x10fe <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    10d6:	a4 e3       	ldi	r26, 0x34	; 52
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e4 e3       	ldi	r30, 0x34	; 52
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <GPIO_setupPinDirection+0x13c>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <GPIO_setupPinDirection+0x138>
    10f8:	84 2b       	or	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	40 c0       	rjmp	.+128    	; 0x117e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    10fe:	a4 e3       	ldi	r26, 0x34	; 52
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e4 e3       	ldi	r30, 0x34	; 52
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <GPIO_setupPinDirection+0x164>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <GPIO_setupPinDirection+0x160>
    1120:	80 95       	com	r24
    1122:	84 23       	and	r24, r20
    1124:	8c 93       	st	X, r24
    1126:	2b c0       	rjmp	.+86     	; 0x117e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	a1 f4       	brne	.+40     	; 0x1156 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    112e:	a1 e3       	ldi	r26, 0x31	; 49
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e1 e3       	ldi	r30, 0x31	; 49
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 2e       	mov	r0, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <GPIO_setupPinDirection+0x194>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <GPIO_setupPinDirection+0x190>
    1150:	84 2b       	or	r24, r20
    1152:	8c 93       	st	X, r24
    1154:	14 c0       	rjmp	.+40     	; 0x117e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1156:	a1 e3       	ldi	r26, 0x31	; 49
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e1 e3       	ldi	r30, 0x31	; 49
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	48 2f       	mov	r20, r24
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	02 2e       	mov	r0, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <GPIO_setupPinDirection+0x1bc>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	0a 94       	dec	r0
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <GPIO_setupPinDirection+0x1b8>
    1178:	80 95       	com	r24
    117a:	84 23       	and	r24, r20
    117c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <GPIO_writePin>:
 	 	 	 	 * If the pin is input, this function will enable/disable the internal pull-up resistor.
[Arguments]    	: This Function take port number,pin number and value to be written.
[Returns]      	: This Function return nothing
****************************************************************************************************/
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	00 d0       	rcall	.+0      	; 0x1194 <GPIO_writePin+0x6>
    1194:	00 d0       	rcall	.+0      	; 0x1196 <GPIO_writePin+0x8>
    1196:	0f 92       	push	r0
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	6a 83       	std	Y+2, r22	; 0x02
    11a0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	88 30       	cpi	r24, 0x08	; 8
    11a6:	08 f0       	brcs	.+2      	; 0x11aa <GPIO_writePin+0x1c>
    11a8:	d5 c0       	rjmp	.+426    	; 0x1354 <GPIO_writePin+0x1c6>
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	84 30       	cpi	r24, 0x04	; 4
    11ae:	08 f0       	brcs	.+2      	; 0x11b2 <GPIO_writePin+0x24>
    11b0:	d1 c0       	rjmp	.+418    	; 0x1354 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	3d 83       	std	Y+5, r19	; 0x05
    11ba:	2c 83       	std	Y+4, r18	; 0x04
    11bc:	8c 81       	ldd	r24, Y+4	; 0x04
    11be:	9d 81       	ldd	r25, Y+5	; 0x05
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	91 05       	cpc	r25, r1
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <GPIO_writePin+0x3a>
    11c6:	43 c0       	rjmp	.+134    	; 0x124e <GPIO_writePin+0xc0>
    11c8:	2c 81       	ldd	r18, Y+4	; 0x04
    11ca:	3d 81       	ldd	r19, Y+5	; 0x05
    11cc:	22 30       	cpi	r18, 0x02	; 2
    11ce:	31 05       	cpc	r19, r1
    11d0:	2c f4       	brge	.+10     	; 0x11dc <GPIO_writePin+0x4e>
    11d2:	8c 81       	ldd	r24, Y+4	; 0x04
    11d4:	9d 81       	ldd	r25, Y+5	; 0x05
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	71 f0       	breq	.+28     	; 0x11f6 <GPIO_writePin+0x68>
    11da:	bc c0       	rjmp	.+376    	; 0x1354 <GPIO_writePin+0x1c6>
    11dc:	2c 81       	ldd	r18, Y+4	; 0x04
    11de:	3d 81       	ldd	r19, Y+5	; 0x05
    11e0:	22 30       	cpi	r18, 0x02	; 2
    11e2:	31 05       	cpc	r19, r1
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <GPIO_writePin+0x5a>
    11e6:	5f c0       	rjmp	.+190    	; 0x12a6 <GPIO_writePin+0x118>
    11e8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ea:	9d 81       	ldd	r25, Y+5	; 0x05
    11ec:	83 30       	cpi	r24, 0x03	; 3
    11ee:	91 05       	cpc	r25, r1
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <GPIO_writePin+0x66>
    11f2:	85 c0       	rjmp	.+266    	; 0x12fe <GPIO_writePin+0x170>
    11f4:	af c0       	rjmp	.+350    	; 0x1354 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	81 30       	cpi	r24, 0x01	; 1
    11fa:	a1 f4       	brne	.+40     	; 0x1224 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    11fc:	ab e3       	ldi	r26, 0x3B	; 59
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	eb e3       	ldi	r30, 0x3B	; 59
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	48 2f       	mov	r20, r24
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 2e       	mov	r0, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <GPIO_writePin+0x8c>
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	0a 94       	dec	r0
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <GPIO_writePin+0x88>
    121e:	84 2b       	or	r24, r20
    1220:	8c 93       	st	X, r24
    1222:	98 c0       	rjmp	.+304    	; 0x1354 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1224:	ab e3       	ldi	r26, 0x3B	; 59
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	eb e3       	ldi	r30, 0x3B	; 59
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	48 2f       	mov	r20, r24
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 2e       	mov	r0, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <GPIO_writePin+0xb4>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <GPIO_writePin+0xb0>
    1246:	80 95       	com	r24
    1248:	84 23       	and	r24, r20
    124a:	8c 93       	st	X, r24
    124c:	83 c0       	rjmp	.+262    	; 0x1354 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	a1 f4       	brne	.+40     	; 0x127c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1254:	a8 e3       	ldi	r26, 0x38	; 56
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e8 e3       	ldi	r30, 0x38	; 56
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	48 2f       	mov	r20, r24
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	02 2e       	mov	r0, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <GPIO_writePin+0xe4>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	0a 94       	dec	r0
    1274:	e2 f7       	brpl	.-8      	; 0x126e <GPIO_writePin+0xe0>
    1276:	84 2b       	or	r24, r20
    1278:	8c 93       	st	X, r24
    127a:	6c c0       	rjmp	.+216    	; 0x1354 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    127c:	a8 e3       	ldi	r26, 0x38	; 56
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e8 e3       	ldi	r30, 0x38	; 56
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <GPIO_writePin+0x10c>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <GPIO_writePin+0x108>
    129e:	80 95       	com	r24
    12a0:	84 23       	and	r24, r20
    12a2:	8c 93       	st	X, r24
    12a4:	57 c0       	rjmp	.+174    	; 0x1354 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	a1 f4       	brne	.+40     	; 0x12d4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    12ac:	a5 e3       	ldi	r26, 0x35	; 53
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e5 e3       	ldi	r30, 0x35	; 53
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 2e       	mov	r0, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <GPIO_writePin+0x13c>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <GPIO_writePin+0x138>
    12ce:	84 2b       	or	r24, r20
    12d0:	8c 93       	st	X, r24
    12d2:	40 c0       	rjmp	.+128    	; 0x1354 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    12d4:	a5 e3       	ldi	r26, 0x35	; 53
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e5 e3       	ldi	r30, 0x35	; 53
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 2e       	mov	r0, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <GPIO_writePin+0x164>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	0a 94       	dec	r0
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <GPIO_writePin+0x160>
    12f6:	80 95       	com	r24
    12f8:	84 23       	and	r24, r20
    12fa:	8c 93       	st	X, r24
    12fc:	2b c0       	rjmp	.+86     	; 0x1354 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	81 30       	cpi	r24, 0x01	; 1
    1302:	a1 f4       	brne	.+40     	; 0x132c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1304:	a2 e3       	ldi	r26, 0x32	; 50
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e2 e3       	ldi	r30, 0x32	; 50
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 2e       	mov	r0, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <GPIO_writePin+0x194>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	0a 94       	dec	r0
    1324:	e2 f7       	brpl	.-8      	; 0x131e <GPIO_writePin+0x190>
    1326:	84 2b       	or	r24, r20
    1328:	8c 93       	st	X, r24
    132a:	14 c0       	rjmp	.+40     	; 0x1354 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    132c:	a2 e3       	ldi	r26, 0x32	; 50
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e2 e3       	ldi	r30, 0x32	; 50
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	48 2f       	mov	r20, r24
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 2e       	mov	r0, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <GPIO_writePin+0x1bc>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	0a 94       	dec	r0
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <GPIO_writePin+0x1b8>
    134e:	80 95       	com	r24
    1350:	84 23       	and	r24, r20
    1352:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <GPIO_readPin>:
 	 	 	 	 * If the input port number or pin number are not correct, The function will return Logic Low.
[Arguments]    	: This Function take port number,pin number
[Returns]      	: This Function return value written on the pin
****************************************************************************************************/
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	00 d0       	rcall	.+0      	; 0x136a <GPIO_readPin+0x6>
    136a:	00 d0       	rcall	.+0      	; 0x136c <GPIO_readPin+0x8>
    136c:	0f 92       	push	r0
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	8a 83       	std	Y+2, r24	; 0x02
    1374:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1376:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	88 30       	cpi	r24, 0x08	; 8
    137c:	08 f0       	brcs	.+2      	; 0x1380 <GPIO_readPin+0x1c>
    137e:	84 c0       	rjmp	.+264    	; 0x1488 <GPIO_readPin+0x124>
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	84 30       	cpi	r24, 0x04	; 4
    1384:	08 f0       	brcs	.+2      	; 0x1388 <GPIO_readPin+0x24>
    1386:	80 c0       	rjmp	.+256    	; 0x1488 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	3d 83       	std	Y+5, r19	; 0x05
    1390:	2c 83       	std	Y+4, r18	; 0x04
    1392:	4c 81       	ldd	r20, Y+4	; 0x04
    1394:	5d 81       	ldd	r21, Y+5	; 0x05
    1396:	41 30       	cpi	r20, 0x01	; 1
    1398:	51 05       	cpc	r21, r1
    139a:	79 f1       	breq	.+94     	; 0x13fa <GPIO_readPin+0x96>
    139c:	8c 81       	ldd	r24, Y+4	; 0x04
    139e:	9d 81       	ldd	r25, Y+5	; 0x05
    13a0:	82 30       	cpi	r24, 0x02	; 2
    13a2:	91 05       	cpc	r25, r1
    13a4:	34 f4       	brge	.+12     	; 0x13b2 <GPIO_readPin+0x4e>
    13a6:	2c 81       	ldd	r18, Y+4	; 0x04
    13a8:	3d 81       	ldd	r19, Y+5	; 0x05
    13aa:	21 15       	cp	r18, r1
    13ac:	31 05       	cpc	r19, r1
    13ae:	69 f0       	breq	.+26     	; 0x13ca <GPIO_readPin+0x66>
    13b0:	6b c0       	rjmp	.+214    	; 0x1488 <GPIO_readPin+0x124>
    13b2:	4c 81       	ldd	r20, Y+4	; 0x04
    13b4:	5d 81       	ldd	r21, Y+5	; 0x05
    13b6:	42 30       	cpi	r20, 0x02	; 2
    13b8:	51 05       	cpc	r21, r1
    13ba:	b9 f1       	breq	.+110    	; 0x142a <GPIO_readPin+0xc6>
    13bc:	8c 81       	ldd	r24, Y+4	; 0x04
    13be:	9d 81       	ldd	r25, Y+5	; 0x05
    13c0:	83 30       	cpi	r24, 0x03	; 3
    13c2:	91 05       	cpc	r25, r1
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <GPIO_readPin+0x64>
    13c6:	49 c0       	rjmp	.+146    	; 0x145a <GPIO_readPin+0xf6>
    13c8:	5f c0       	rjmp	.+190    	; 0x1488 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    13ca:	e9 e3       	ldi	r30, 0x39	; 57
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	88 2f       	mov	r24, r24
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	a9 01       	movw	r20, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <GPIO_readPin+0x7e>
    13de:	55 95       	asr	r21
    13e0:	47 95       	ror	r20
    13e2:	8a 95       	dec	r24
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <GPIO_readPin+0x7a>
    13e6:	ca 01       	movw	r24, r20
    13e8:	81 70       	andi	r24, 0x01	; 1
    13ea:	90 70       	andi	r25, 0x00	; 0
    13ec:	88 23       	and	r24, r24
    13ee:	19 f0       	breq	.+6      	; 0x13f6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	89 83       	std	Y+1, r24	; 0x01
    13f4:	49 c0       	rjmp	.+146    	; 0x1488 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13f6:	19 82       	std	Y+1, r1	; 0x01
    13f8:	47 c0       	rjmp	.+142    	; 0x1488 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    13fa:	e6 e3       	ldi	r30, 0x36	; 54
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	88 2f       	mov	r24, r24
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	a9 01       	movw	r20, r18
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <GPIO_readPin+0xae>
    140e:	55 95       	asr	r21
    1410:	47 95       	ror	r20
    1412:	8a 95       	dec	r24
    1414:	e2 f7       	brpl	.-8      	; 0x140e <GPIO_readPin+0xaa>
    1416:	ca 01       	movw	r24, r20
    1418:	81 70       	andi	r24, 0x01	; 1
    141a:	90 70       	andi	r25, 0x00	; 0
    141c:	88 23       	and	r24, r24
    141e:	19 f0       	breq	.+6      	; 0x1426 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	89 83       	std	Y+1, r24	; 0x01
    1424:	31 c0       	rjmp	.+98     	; 0x1488 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1426:	19 82       	std	Y+1, r1	; 0x01
    1428:	2f c0       	rjmp	.+94     	; 0x1488 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    142a:	e3 e3       	ldi	r30, 0x33	; 51
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	88 2f       	mov	r24, r24
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	a9 01       	movw	r20, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <GPIO_readPin+0xde>
    143e:	55 95       	asr	r21
    1440:	47 95       	ror	r20
    1442:	8a 95       	dec	r24
    1444:	e2 f7       	brpl	.-8      	; 0x143e <GPIO_readPin+0xda>
    1446:	ca 01       	movw	r24, r20
    1448:	81 70       	andi	r24, 0x01	; 1
    144a:	90 70       	andi	r25, 0x00	; 0
    144c:	88 23       	and	r24, r24
    144e:	19 f0       	breq	.+6      	; 0x1456 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	89 83       	std	Y+1, r24	; 0x01
    1454:	19 c0       	rjmp	.+50     	; 0x1488 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1456:	19 82       	std	Y+1, r1	; 0x01
    1458:	17 c0       	rjmp	.+46     	; 0x1488 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    145a:	e0 e3       	ldi	r30, 0x30	; 48
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	88 2f       	mov	r24, r24
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	a9 01       	movw	r20, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <GPIO_readPin+0x10e>
    146e:	55 95       	asr	r21
    1470:	47 95       	ror	r20
    1472:	8a 95       	dec	r24
    1474:	e2 f7       	brpl	.-8      	; 0x146e <GPIO_readPin+0x10a>
    1476:	ca 01       	movw	r24, r20
    1478:	81 70       	andi	r24, 0x01	; 1
    147a:	90 70       	andi	r25, 0x00	; 0
    147c:	88 23       	and	r24, r24
    147e:	19 f0       	breq	.+6      	; 0x1486 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	89 83       	std	Y+1, r24	; 0x01
    1484:	01 c0       	rjmp	.+2      	; 0x1488 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1486:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1488:	89 81       	ldd	r24, Y+1	; 0x01
}
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <GPIO_setupPortDirection>:
				 * If the input port number is not correct, The function will not handle the request.
[Arguments]    	: This Function take port number,port direction.
[Returns]      	: This Function return nothing
****************************************************************************************************/
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <GPIO_setupPortDirection+0x6>
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <GPIO_setupPortDirection+0x8>
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	89 83       	std	Y+1, r24	; 0x01
    14a8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	84 30       	cpi	r24, 0x04	; 4
    14ae:	90 f5       	brcc	.+100    	; 0x1514 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	3c 83       	std	Y+4, r19	; 0x04
    14b8:	2b 83       	std	Y+3, r18	; 0x03
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	91 05       	cpc	r25, r1
    14c2:	d1 f0       	breq	.+52     	; 0x14f8 <GPIO_setupPortDirection+0x5e>
    14c4:	2b 81       	ldd	r18, Y+3	; 0x03
    14c6:	3c 81       	ldd	r19, Y+4	; 0x04
    14c8:	22 30       	cpi	r18, 0x02	; 2
    14ca:	31 05       	cpc	r19, r1
    14cc:	2c f4       	brge	.+10     	; 0x14d8 <GPIO_setupPortDirection+0x3e>
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	61 f0       	breq	.+24     	; 0x14ee <GPIO_setupPortDirection+0x54>
    14d6:	1e c0       	rjmp	.+60     	; 0x1514 <GPIO_setupPortDirection+0x7a>
    14d8:	2b 81       	ldd	r18, Y+3	; 0x03
    14da:	3c 81       	ldd	r19, Y+4	; 0x04
    14dc:	22 30       	cpi	r18, 0x02	; 2
    14de:	31 05       	cpc	r19, r1
    14e0:	81 f0       	breq	.+32     	; 0x1502 <GPIO_setupPortDirection+0x68>
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	9c 81       	ldd	r25, Y+4	; 0x04
    14e6:	83 30       	cpi	r24, 0x03	; 3
    14e8:	91 05       	cpc	r25, r1
    14ea:	81 f0       	breq	.+32     	; 0x150c <GPIO_setupPortDirection+0x72>
    14ec:	13 c0       	rjmp	.+38     	; 0x1514 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    14ee:	ea e3       	ldi	r30, 0x3A	; 58
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	80 83       	st	Z, r24
    14f6:	0e c0       	rjmp	.+28     	; 0x1514 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    14f8:	e7 e3       	ldi	r30, 0x37	; 55
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	80 83       	st	Z, r24
    1500:	09 c0       	rjmp	.+18     	; 0x1514 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1502:	e4 e3       	ldi	r30, 0x34	; 52
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	80 83       	st	Z, r24
    150a:	04 c0       	rjmp	.+8      	; 0x1514 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    150c:	e1 e3       	ldi	r30, 0x31	; 49
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	80 83       	st	Z, r24
			break;
		}
	}
}
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <GPIO_writePort>:
				 * If the input port number is not correct, The function will not handle the request.
[Arguments]    	: This Function take port number, value to be written on all the port.
[Returns]      	: This Function return nothing
****************************************************************************************************/
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	00 d0       	rcall	.+0      	; 0x1528 <GPIO_writePort+0x6>
    1528:	00 d0       	rcall	.+0      	; 0x152a <GPIO_writePort+0x8>
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	84 30       	cpi	r24, 0x04	; 4
    1536:	90 f5       	brcc	.+100    	; 0x159c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	3c 83       	std	Y+4, r19	; 0x04
    1540:	2b 83       	std	Y+3, r18	; 0x03
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	9c 81       	ldd	r25, Y+4	; 0x04
    1546:	81 30       	cpi	r24, 0x01	; 1
    1548:	91 05       	cpc	r25, r1
    154a:	d1 f0       	breq	.+52     	; 0x1580 <GPIO_writePort+0x5e>
    154c:	2b 81       	ldd	r18, Y+3	; 0x03
    154e:	3c 81       	ldd	r19, Y+4	; 0x04
    1550:	22 30       	cpi	r18, 0x02	; 2
    1552:	31 05       	cpc	r19, r1
    1554:	2c f4       	brge	.+10     	; 0x1560 <GPIO_writePort+0x3e>
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	61 f0       	breq	.+24     	; 0x1576 <GPIO_writePort+0x54>
    155e:	1e c0       	rjmp	.+60     	; 0x159c <GPIO_writePort+0x7a>
    1560:	2b 81       	ldd	r18, Y+3	; 0x03
    1562:	3c 81       	ldd	r19, Y+4	; 0x04
    1564:	22 30       	cpi	r18, 0x02	; 2
    1566:	31 05       	cpc	r19, r1
    1568:	81 f0       	breq	.+32     	; 0x158a <GPIO_writePort+0x68>
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	83 30       	cpi	r24, 0x03	; 3
    1570:	91 05       	cpc	r25, r1
    1572:	81 f0       	breq	.+32     	; 0x1594 <GPIO_writePort+0x72>
    1574:	13 c0       	rjmp	.+38     	; 0x159c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1576:	eb e3       	ldi	r30, 0x3B	; 59
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	80 83       	st	Z, r24
    157e:	0e c0       	rjmp	.+28     	; 0x159c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1580:	e8 e3       	ldi	r30, 0x38	; 56
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	80 83       	st	Z, r24
    1588:	09 c0       	rjmp	.+18     	; 0x159c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    158a:	e5 e3       	ldi	r30, 0x35	; 53
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	80 83       	st	Z, r24
    1592:	04 c0       	rjmp	.+8      	; 0x159c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1594:	e2 e3       	ldi	r30, 0x32	; 50
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	80 83       	st	Z, r24
			break;
		}
	}
}
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <GPIO_readPort>:
 	 	 	 	 * If the input port number is not correct, The function will return ZERO value.
[Arguments]    	: This Function take port number
[Returns]      	: This Function return the written value on the port.
****************************************************************************************************/
uint8 GPIO_readPort(uint8 port_num)
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <GPIO_readPort+0x6>
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <GPIO_readPort+0x8>
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    15b8:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	84 30       	cpi	r24, 0x04	; 4
    15be:	90 f5       	brcc	.+100    	; 0x1624 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	3c 83       	std	Y+4, r19	; 0x04
    15c8:	2b 83       	std	Y+3, r18	; 0x03
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	9c 81       	ldd	r25, Y+4	; 0x04
    15ce:	81 30       	cpi	r24, 0x01	; 1
    15d0:	91 05       	cpc	r25, r1
    15d2:	d1 f0       	breq	.+52     	; 0x1608 <GPIO_readPort+0x5e>
    15d4:	2b 81       	ldd	r18, Y+3	; 0x03
    15d6:	3c 81       	ldd	r19, Y+4	; 0x04
    15d8:	22 30       	cpi	r18, 0x02	; 2
    15da:	31 05       	cpc	r19, r1
    15dc:	2c f4       	brge	.+10     	; 0x15e8 <GPIO_readPort+0x3e>
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	9c 81       	ldd	r25, Y+4	; 0x04
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	61 f0       	breq	.+24     	; 0x15fe <GPIO_readPort+0x54>
    15e6:	1e c0       	rjmp	.+60     	; 0x1624 <GPIO_readPort+0x7a>
    15e8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ea:	3c 81       	ldd	r19, Y+4	; 0x04
    15ec:	22 30       	cpi	r18, 0x02	; 2
    15ee:	31 05       	cpc	r19, r1
    15f0:	81 f0       	breq	.+32     	; 0x1612 <GPIO_readPort+0x68>
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	9c 81       	ldd	r25, Y+4	; 0x04
    15f6:	83 30       	cpi	r24, 0x03	; 3
    15f8:	91 05       	cpc	r25, r1
    15fa:	81 f0       	breq	.+32     	; 0x161c <GPIO_readPort+0x72>
    15fc:	13 c0       	rjmp	.+38     	; 0x1624 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    15fe:	e9 e3       	ldi	r30, 0x39	; 57
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	0e c0       	rjmp	.+28     	; 0x1624 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1608:	e6 e3       	ldi	r30, 0x36	; 54
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	09 c0       	rjmp	.+18     	; 0x1624 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1612:	e3 e3       	ldi	r30, 0x33	; 51
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	04 c0       	rjmp	.+8      	; 0x1624 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    161c:	e0 e3       	ldi	r30, 0x30	; 48
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1624:	89 81       	ldd	r24, Y+1	; 0x01
}
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <KEYPAD_getPressedKey>:
[Arguments]    	: This Function take no Arguments.
[Returns]      	: This Function return nothing

 ****************************************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	60 97       	sbiw	r28, 0x10	; 16
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	60 e0       	ldi	r22, 0x00	; 0
    164c:	40 e0       	ldi	r20, 0x00	; 0
    164e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	61 e0       	ldi	r22, 0x01	; 1
    1656:	40 e0       	ldi	r20, 0x00	; 0
    1658:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	62 e0       	ldi	r22, 0x02	; 2
    1660:	40 e0       	ldi	r20, 0x00	; 0
    1662:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	63 e0       	ldi	r22, 0x03	; 3
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	64 e0       	ldi	r22, 0x04	; 4
    1674:	40 e0       	ldi	r20, 0x00	; 0
    1676:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	65 e0       	ldi	r22, 0x05	; 5
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	66 e0       	ldi	r22, 0x06	; 6
    1688:	40 e0       	ldi	r20, 0x00	; 0
    168a:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	67 e0       	ldi	r22, 0x07	; 7
    1692:	40 e0       	ldi	r20, 0x00	; 0
    1694:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1698:	1f 86       	std	Y+15, r1	; 0x0f
    169a:	ab c0       	rjmp	.+342    	; 0x17f2 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	6f 85       	ldd	r22, Y+15	; 0x0f
    16a0:	41 e0       	ldi	r20, 0x01	; 1
    16a2:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	6f 85       	ldd	r22, Y+15	; 0x0f
    16aa:	40 e0       	ldi	r20, 0x00	; 0
    16ac:	0e 94 c7 08 	call	0x118e	; 0x118e <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    16b0:	18 8a       	std	Y+16, r1	; 0x10
    16b2:	22 c0       	rjmp	.+68     	; 0x16f8 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    16b4:	88 89       	ldd	r24, Y+16	; 0x10
    16b6:	98 2f       	mov	r25, r24
    16b8:	9c 5f       	subi	r25, 0xFC	; 252
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	69 2f       	mov	r22, r25
    16be:	0e 94 b2 09 	call	0x1364	; 0x1364 <GPIO_readPin>
    16c2:	88 23       	and	r24, r24
    16c4:	b1 f4       	brne	.+44     	; 0x16f2 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    16c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    16c8:	88 2f       	mov	r24, r24
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	98 2f       	mov	r25, r24
    16d6:	88 89       	ldd	r24, Y+16	; 0x10
    16d8:	89 0f       	add	r24, r25
    16da:	8f 5f       	subi	r24, 0xFF	; 255
    16dc:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    16e0:	60 96       	adiw	r28, 0x10	; 16
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    16f2:	88 89       	ldd	r24, Y+16	; 0x10
    16f4:	8f 5f       	subi	r24, 0xFF	; 255
    16f6:	88 8b       	std	Y+16, r24	; 0x10
    16f8:	88 89       	ldd	r24, Y+16	; 0x10
    16fa:	84 30       	cpi	r24, 0x04	; 4
    16fc:	d8 f2       	brcs	.-74     	; 0x16b4 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	6f 85       	ldd	r22, Y+15	; 0x0f
    1702:	40 e0       	ldi	r20, 0x00	; 0
    1704:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <GPIO_setupPinDirection>
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	a0 ea       	ldi	r26, 0xA0	; 160
    170e:	b0 e4       	ldi	r27, 0x40	; 64
    1710:	8b 87       	std	Y+11, r24	; 0x0b
    1712:	9c 87       	std	Y+12, r25	; 0x0c
    1714:	ad 87       	std	Y+13, r26	; 0x0d
    1716:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1718:	6b 85       	ldd	r22, Y+11	; 0x0b
    171a:	7c 85       	ldd	r23, Y+12	; 0x0c
    171c:	8d 85       	ldd	r24, Y+13	; 0x0d
    171e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	4a e7       	ldi	r20, 0x7A	; 122
    1726:	53 e4       	ldi	r21, 0x43	; 67
    1728:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	8f 83       	std	Y+7, r24	; 0x07
    1732:	98 87       	std	Y+8, r25	; 0x08
    1734:	a9 87       	std	Y+9, r26	; 0x09
    1736:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1738:	6f 81       	ldd	r22, Y+7	; 0x07
    173a:	78 85       	ldd	r23, Y+8	; 0x08
    173c:	89 85       	ldd	r24, Y+9	; 0x09
    173e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	40 e8       	ldi	r20, 0x80	; 128
    1746:	5f e3       	ldi	r21, 0x3F	; 63
    1748:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    174c:	88 23       	and	r24, r24
    174e:	2c f4       	brge	.+10     	; 0x175a <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	9e 83       	std	Y+6, r25	; 0x06
    1756:	8d 83       	std	Y+5, r24	; 0x05
    1758:	3f c0       	rjmp	.+126    	; 0x17d8 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    175a:	6f 81       	ldd	r22, Y+7	; 0x07
    175c:	78 85       	ldd	r23, Y+8	; 0x08
    175e:	89 85       	ldd	r24, Y+9	; 0x09
    1760:	9a 85       	ldd	r25, Y+10	; 0x0a
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	3f ef       	ldi	r19, 0xFF	; 255
    1766:	4f e7       	ldi	r20, 0x7F	; 127
    1768:	57 e4       	ldi	r21, 0x47	; 71
    176a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    176e:	18 16       	cp	r1, r24
    1770:	4c f5       	brge	.+82     	; 0x17c4 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1772:	6b 85       	ldd	r22, Y+11	; 0x0b
    1774:	7c 85       	ldd	r23, Y+12	; 0x0c
    1776:	8d 85       	ldd	r24, Y+13	; 0x0d
    1778:	9e 85       	ldd	r25, Y+14	; 0x0e
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e2       	ldi	r20, 0x20	; 32
    1780:	51 e4       	ldi	r21, 0x41	; 65
    1782:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	bc 01       	movw	r22, r24
    178c:	cd 01       	movw	r24, r26
    178e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	9e 83       	std	Y+6, r25	; 0x06
    1798:	8d 83       	std	Y+5, r24	; 0x05
    179a:	0f c0       	rjmp	.+30     	; 0x17ba <KEYPAD_getPressedKey+0x186>
    179c:	89 e1       	ldi	r24, 0x19	; 25
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	9c 83       	std	Y+4, r25	; 0x04
    17a2:	8b 83       	std	Y+3, r24	; 0x03
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	9c 81       	ldd	r25, Y+4	; 0x04
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	f1 f7       	brne	.-4      	; 0x17a8 <KEYPAD_getPressedKey+0x174>
    17ac:	9c 83       	std	Y+4, r25	; 0x04
    17ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b0:	8d 81       	ldd	r24, Y+5	; 0x05
    17b2:	9e 81       	ldd	r25, Y+6	; 0x06
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	9e 83       	std	Y+6, r25	; 0x06
    17b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ba:	8d 81       	ldd	r24, Y+5	; 0x05
    17bc:	9e 81       	ldd	r25, Y+6	; 0x06
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	69 f7       	brne	.-38     	; 0x179c <KEYPAD_getPressedKey+0x168>
    17c2:	14 c0       	rjmp	.+40     	; 0x17ec <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c4:	6f 81       	ldd	r22, Y+7	; 0x07
    17c6:	78 85       	ldd	r23, Y+8	; 0x08
    17c8:	89 85       	ldd	r24, Y+9	; 0x09
    17ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    17cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	9e 83       	std	Y+6, r25	; 0x06
    17d6:	8d 83       	std	Y+5, r24	; 0x05
    17d8:	8d 81       	ldd	r24, Y+5	; 0x05
    17da:	9e 81       	ldd	r25, Y+6	; 0x06
    17dc:	9a 83       	std	Y+2, r25	; 0x02
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	9a 81       	ldd	r25, Y+2	; 0x02
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <KEYPAD_getPressedKey+0x1b0>
    17e8:	9a 83       	std	Y+2, r25	; 0x02
    17ea:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    17ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ee:	8f 5f       	subi	r24, 0xFF	; 255
    17f0:	8f 87       	std	Y+15, r24	; 0x0f
    17f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17f4:	84 30       	cpi	r24, 0x04	; 4
    17f6:	08 f4       	brcc	.+2      	; 0x17fa <KEYPAD_getPressedKey+0x1c6>
    17f8:	51 cf       	rjmp	.-350    	; 0x169c <KEYPAD_getPressedKey+0x68>
    17fa:	4e cf       	rjmp	.-356    	; 0x1698 <KEYPAD_getPressedKey+0x64>

000017fc <KEYPAD_4x4_adjustKeyNumber>:
[Arguments]    	: This Function take button number
[Returns]      	: This Function return nothing

 ****************************************************************************************************/
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	00 d0       	rcall	.+0      	; 0x1802 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1802:	00 d0       	rcall	.+0      	; 0x1804 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    180a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	3c 83       	std	Y+4, r19	; 0x04
    1814:	2b 83       	std	Y+3, r18	; 0x03
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	9c 81       	ldd	r25, Y+4	; 0x04
    181a:	88 30       	cpi	r24, 0x08	; 8
    181c:	91 05       	cpc	r25, r1
    181e:	09 f4       	brne	.+2      	; 0x1822 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1820:	70 c0       	rjmp	.+224    	; 0x1902 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1822:	2b 81       	ldd	r18, Y+3	; 0x03
    1824:	3c 81       	ldd	r19, Y+4	; 0x04
    1826:	29 30       	cpi	r18, 0x09	; 9
    1828:	31 05       	cpc	r19, r1
    182a:	5c f5       	brge	.+86     	; 0x1882 <KEYPAD_4x4_adjustKeyNumber+0x86>
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	9c 81       	ldd	r25, Y+4	; 0x04
    1830:	84 30       	cpi	r24, 0x04	; 4
    1832:	91 05       	cpc	r25, r1
    1834:	09 f4       	brne	.+2      	; 0x1838 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1836:	59 c0       	rjmp	.+178    	; 0x18ea <KEYPAD_4x4_adjustKeyNumber+0xee>
    1838:	2b 81       	ldd	r18, Y+3	; 0x03
    183a:	3c 81       	ldd	r19, Y+4	; 0x04
    183c:	25 30       	cpi	r18, 0x05	; 5
    183e:	31 05       	cpc	r19, r1
    1840:	9c f4       	brge	.+38     	; 0x1868 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	9c 81       	ldd	r25, Y+4	; 0x04
    1846:	82 30       	cpi	r24, 0x02	; 2
    1848:	91 05       	cpc	r25, r1
    184a:	09 f4       	brne	.+2      	; 0x184e <KEYPAD_4x4_adjustKeyNumber+0x52>
    184c:	48 c0       	rjmp	.+144    	; 0x18de <KEYPAD_4x4_adjustKeyNumber+0xe2>
    184e:	2b 81       	ldd	r18, Y+3	; 0x03
    1850:	3c 81       	ldd	r19, Y+4	; 0x04
    1852:	23 30       	cpi	r18, 0x03	; 3
    1854:	31 05       	cpc	r19, r1
    1856:	0c f0       	brlt	.+2      	; 0x185a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1858:	45 c0       	rjmp	.+138    	; 0x18e4 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	81 30       	cpi	r24, 0x01	; 1
    1860:	91 05       	cpc	r25, r1
    1862:	09 f4       	brne	.+2      	; 0x1866 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1864:	39 c0       	rjmp	.+114    	; 0x18d8 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1866:	67 c0       	rjmp	.+206    	; 0x1936 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1868:	2b 81       	ldd	r18, Y+3	; 0x03
    186a:	3c 81       	ldd	r19, Y+4	; 0x04
    186c:	26 30       	cpi	r18, 0x06	; 6
    186e:	31 05       	cpc	r19, r1
    1870:	09 f4       	brne	.+2      	; 0x1874 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1872:	41 c0       	rjmp	.+130    	; 0x18f6 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	9c 81       	ldd	r25, Y+4	; 0x04
    1878:	87 30       	cpi	r24, 0x07	; 7
    187a:	91 05       	cpc	r25, r1
    187c:	0c f0       	brlt	.+2      	; 0x1880 <KEYPAD_4x4_adjustKeyNumber+0x84>
    187e:	3e c0       	rjmp	.+124    	; 0x18fc <KEYPAD_4x4_adjustKeyNumber+0x100>
    1880:	37 c0       	rjmp	.+110    	; 0x18f0 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1882:	2b 81       	ldd	r18, Y+3	; 0x03
    1884:	3c 81       	ldd	r19, Y+4	; 0x04
    1886:	2c 30       	cpi	r18, 0x0C	; 12
    1888:	31 05       	cpc	r19, r1
    188a:	09 f4       	brne	.+2      	; 0x188e <KEYPAD_4x4_adjustKeyNumber+0x92>
    188c:	46 c0       	rjmp	.+140    	; 0x191a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	8d 30       	cpi	r24, 0x0D	; 13
    1894:	91 05       	cpc	r25, r1
    1896:	5c f4       	brge	.+22     	; 0x18ae <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1898:	2b 81       	ldd	r18, Y+3	; 0x03
    189a:	3c 81       	ldd	r19, Y+4	; 0x04
    189c:	2a 30       	cpi	r18, 0x0A	; 10
    189e:	31 05       	cpc	r19, r1
    18a0:	b1 f1       	breq	.+108    	; 0x190e <KEYPAD_4x4_adjustKeyNumber+0x112>
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	9c 81       	ldd	r25, Y+4	; 0x04
    18a6:	8b 30       	cpi	r24, 0x0B	; 11
    18a8:	91 05       	cpc	r25, r1
    18aa:	a4 f5       	brge	.+104    	; 0x1914 <KEYPAD_4x4_adjustKeyNumber+0x118>
    18ac:	2d c0       	rjmp	.+90     	; 0x1908 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    18ae:	2b 81       	ldd	r18, Y+3	; 0x03
    18b0:	3c 81       	ldd	r19, Y+4	; 0x04
    18b2:	2e 30       	cpi	r18, 0x0E	; 14
    18b4:	31 05       	cpc	r19, r1
    18b6:	b9 f1       	breq	.+110    	; 0x1926 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	8e 30       	cpi	r24, 0x0E	; 14
    18be:	91 05       	cpc	r25, r1
    18c0:	7c f1       	brlt	.+94     	; 0x1920 <KEYPAD_4x4_adjustKeyNumber+0x124>
    18c2:	2b 81       	ldd	r18, Y+3	; 0x03
    18c4:	3c 81       	ldd	r19, Y+4	; 0x04
    18c6:	2f 30       	cpi	r18, 0x0F	; 15
    18c8:	31 05       	cpc	r19, r1
    18ca:	79 f1       	breq	.+94     	; 0x192a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	9c 81       	ldd	r25, Y+4	; 0x04
    18d0:	80 31       	cpi	r24, 0x10	; 16
    18d2:	91 05       	cpc	r25, r1
    18d4:	69 f1       	breq	.+90     	; 0x1930 <KEYPAD_4x4_adjustKeyNumber+0x134>
    18d6:	2f c0       	rjmp	.+94     	; 0x1936 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    18d8:	87 e0       	ldi	r24, 0x07	; 7
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	2e c0       	rjmp	.+92     	; 0x193a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    18de:	88 e0       	ldi	r24, 0x08	; 8
    18e0:	89 83       	std	Y+1, r24	; 0x01
    18e2:	2b c0       	rjmp	.+86     	; 0x193a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    18e4:	89 e0       	ldi	r24, 0x09	; 9
    18e6:	89 83       	std	Y+1, r24	; 0x01
    18e8:	28 c0       	rjmp	.+80     	; 0x193a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    18ea:	85 e2       	ldi	r24, 0x25	; 37
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	25 c0       	rjmp	.+74     	; 0x193a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    18f0:	84 e0       	ldi	r24, 0x04	; 4
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	22 c0       	rjmp	.+68     	; 0x193a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    18f6:	85 e0       	ldi	r24, 0x05	; 5
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	1f c0       	rjmp	.+62     	; 0x193a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    18fc:	86 e0       	ldi	r24, 0x06	; 6
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	1c c0       	rjmp	.+56     	; 0x193a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1902:	8a e2       	ldi	r24, 0x2A	; 42
    1904:	89 83       	std	Y+1, r24	; 0x01
    1906:	19 c0       	rjmp	.+50     	; 0x193a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	89 83       	std	Y+1, r24	; 0x01
    190c:	16 c0       	rjmp	.+44     	; 0x193a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    190e:	82 e0       	ldi	r24, 0x02	; 2
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	13 c0       	rjmp	.+38     	; 0x193a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1914:	83 e0       	ldi	r24, 0x03	; 3
    1916:	89 83       	std	Y+1, r24	; 0x01
    1918:	10 c0       	rjmp	.+32     	; 0x193a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    191a:	8d e2       	ldi	r24, 0x2D	; 45
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	0d c0       	rjmp	.+26     	; 0x193a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1920:	8d e0       	ldi	r24, 0x0D	; 13
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	0a c0       	rjmp	.+20     	; 0x193a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1926:	19 82       	std	Y+1, r1	; 0x01
    1928:	08 c0       	rjmp	.+16     	; 0x193a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    192a:	8d e3       	ldi	r24, 0x3D	; 61
    192c:	89 83       	std	Y+1, r24	; 0x01
    192e:	05 c0       	rjmp	.+10     	; 0x193a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1930:	8b e2       	ldi	r24, 0x2B	; 43
    1932:	89 83       	std	Y+1, r24	; 0x01
    1934:	02 c0       	rjmp	.+4      	; 0x193a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    193a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	2e 97       	sbiw	r28, 0x0e	; 14
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	61 e0       	ldi	r22, 0x01	; 1
    1962:	41 e0       	ldi	r20, 0x01	; 1
    1964:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	62 e0       	ldi	r22, 0x02	; 2
    196c:	41 e0       	ldi	r20, 0x01	; 1
    196e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <GPIO_setupPinDirection>
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	a0 ea       	ldi	r26, 0xA0	; 160
    1978:	b1 e4       	ldi	r27, 0x41	; 65
    197a:	8b 87       	std	Y+11, r24	; 0x0b
    197c:	9c 87       	std	Y+12, r25	; 0x0c
    197e:	ad 87       	std	Y+13, r26	; 0x0d
    1980:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1982:	6b 85       	ldd	r22, Y+11	; 0x0b
    1984:	7c 85       	ldd	r23, Y+12	; 0x0c
    1986:	8d 85       	ldd	r24, Y+13	; 0x0d
    1988:	9e 85       	ldd	r25, Y+14	; 0x0e
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	4a e7       	ldi	r20, 0x7A	; 122
    1990:	53 e4       	ldi	r21, 0x43	; 67
    1992:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	8f 83       	std	Y+7, r24	; 0x07
    199c:	98 87       	std	Y+8, r25	; 0x08
    199e:	a9 87       	std	Y+9, r26	; 0x09
    19a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19a2:	6f 81       	ldd	r22, Y+7	; 0x07
    19a4:	78 85       	ldd	r23, Y+8	; 0x08
    19a6:	89 85       	ldd	r24, Y+9	; 0x09
    19a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	40 e8       	ldi	r20, 0x80	; 128
    19b0:	5f e3       	ldi	r21, 0x3F	; 63
    19b2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19b6:	88 23       	and	r24, r24
    19b8:	2c f4       	brge	.+10     	; 0x19c4 <LCD_init+0x7a>
		__ticks = 1;
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	9e 83       	std	Y+6, r25	; 0x06
    19c0:	8d 83       	std	Y+5, r24	; 0x05
    19c2:	3f c0       	rjmp	.+126    	; 0x1a42 <LCD_init+0xf8>
	else if (__tmp > 65535)
    19c4:	6f 81       	ldd	r22, Y+7	; 0x07
    19c6:	78 85       	ldd	r23, Y+8	; 0x08
    19c8:	89 85       	ldd	r24, Y+9	; 0x09
    19ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	3f ef       	ldi	r19, 0xFF	; 255
    19d0:	4f e7       	ldi	r20, 0x7F	; 127
    19d2:	57 e4       	ldi	r21, 0x47	; 71
    19d4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19d8:	18 16       	cp	r1, r24
    19da:	4c f5       	brge	.+82     	; 0x1a2e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19de:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e2       	ldi	r20, 0x20	; 32
    19ea:	51 e4       	ldi	r21, 0x41	; 65
    19ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	bc 01       	movw	r22, r24
    19f6:	cd 01       	movw	r24, r26
    19f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	9e 83       	std	Y+6, r25	; 0x06
    1a02:	8d 83       	std	Y+5, r24	; 0x05
    1a04:	0f c0       	rjmp	.+30     	; 0x1a24 <LCD_init+0xda>
    1a06:	89 e1       	ldi	r24, 0x19	; 25
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	9c 83       	std	Y+4, r25	; 0x04
    1a0c:	8b 83       	std	Y+3, r24	; 0x03
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	9c 81       	ldd	r25, Y+4	; 0x04
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	f1 f7       	brne	.-4      	; 0x1a12 <LCD_init+0xc8>
    1a16:	9c 83       	std	Y+4, r25	; 0x04
    1a18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	9e 83       	std	Y+6, r25	; 0x06
    1a22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a24:	8d 81       	ldd	r24, Y+5	; 0x05
    1a26:	9e 81       	ldd	r25, Y+6	; 0x06
    1a28:	00 97       	sbiw	r24, 0x00	; 0
    1a2a:	69 f7       	brne	.-38     	; 0x1a06 <LCD_init+0xbc>
    1a2c:	14 c0       	rjmp	.+40     	; 0x1a56 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a30:	78 85       	ldd	r23, Y+8	; 0x08
    1a32:	89 85       	ldd	r24, Y+9	; 0x09
    1a34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	9e 83       	std	Y+6, r25	; 0x06
    1a40:	8d 83       	std	Y+5, r24	; 0x05
    1a42:	8d 81       	ldd	r24, Y+5	; 0x05
    1a44:	9e 81       	ldd	r25, Y+6	; 0x06
    1a46:	9a 83       	std	Y+2, r25	; 0x02
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	f1 f7       	brne	.-4      	; 0x1a4e <LCD_init+0x104>
    1a52:	9a 83       	std	Y+2, r25	; 0x02
    1a54:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1a56:	83 e0       	ldi	r24, 0x03	; 3
    1a58:	6f ef       	ldi	r22, 0xFF	; 255
    1a5a:	0e 94 4d 0a 	call	0x149a	; 0x149a <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1a5e:	88 e3       	ldi	r24, 0x38	; 56
    1a60:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1a64:	8c e0       	ldi	r24, 0x0C	; 12
    1a66:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_sendCommand>
}
    1a70:	2e 96       	adiw	r28, 0x0e	; 14
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	cd bf       	out	0x3d, r28	; 61
    1a7c:	cf 91       	pop	r28
    1a7e:	df 91       	pop	r29
    1a80:	08 95       	ret

00001a82 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1a82:	df 93       	push	r29
    1a84:	cf 93       	push	r28
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	e9 97       	sbiw	r28, 0x39	; 57
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	61 e0       	ldi	r22, 0x01	; 1
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	0e 94 c7 08 	call	0x118e	; 0x118e <GPIO_writePin>
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	a0 e8       	ldi	r26, 0x80	; 128
    1aa8:	bf e3       	ldi	r27, 0x3F	; 63
    1aaa:	8d ab       	std	Y+53, r24	; 0x35
    1aac:	9e ab       	std	Y+54, r25	; 0x36
    1aae:	af ab       	std	Y+55, r26	; 0x37
    1ab0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ab4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ab6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ab8:	98 ad       	ldd	r25, Y+56	; 0x38
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	4a e7       	ldi	r20, 0x7A	; 122
    1ac0:	53 e4       	ldi	r21, 0x43	; 67
    1ac2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	89 ab       	std	Y+49, r24	; 0x31
    1acc:	9a ab       	std	Y+50, r25	; 0x32
    1ace:	ab ab       	std	Y+51, r26	; 0x33
    1ad0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ad2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ad4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ad6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad8:	9c a9       	ldd	r25, Y+52	; 0x34
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	40 e8       	ldi	r20, 0x80	; 128
    1ae0:	5f e3       	ldi	r21, 0x3F	; 63
    1ae2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ae6:	88 23       	and	r24, r24
    1ae8:	2c f4       	brge	.+10     	; 0x1af4 <LCD_sendCommand+0x72>
		__ticks = 1;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	98 ab       	std	Y+48, r25	; 0x30
    1af0:	8f a7       	std	Y+47, r24	; 0x2f
    1af2:	3f c0       	rjmp	.+126    	; 0x1b72 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1af4:	69 a9       	ldd	r22, Y+49	; 0x31
    1af6:	7a a9       	ldd	r23, Y+50	; 0x32
    1af8:	8b a9       	ldd	r24, Y+51	; 0x33
    1afa:	9c a9       	ldd	r25, Y+52	; 0x34
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	3f ef       	ldi	r19, 0xFF	; 255
    1b00:	4f e7       	ldi	r20, 0x7F	; 127
    1b02:	57 e4       	ldi	r21, 0x47	; 71
    1b04:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b08:	18 16       	cp	r1, r24
    1b0a:	4c f5       	brge	.+82     	; 0x1b5e <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0c:	6d a9       	ldd	r22, Y+53	; 0x35
    1b0e:	7e a9       	ldd	r23, Y+54	; 0x36
    1b10:	8f a9       	ldd	r24, Y+55	; 0x37
    1b12:	98 ad       	ldd	r25, Y+56	; 0x38
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e2       	ldi	r20, 0x20	; 32
    1b1a:	51 e4       	ldi	r21, 0x41	; 65
    1b1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	bc 01       	movw	r22, r24
    1b26:	cd 01       	movw	r24, r26
    1b28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	98 ab       	std	Y+48, r25	; 0x30
    1b32:	8f a7       	std	Y+47, r24	; 0x2f
    1b34:	0f c0       	rjmp	.+30     	; 0x1b54 <LCD_sendCommand+0xd2>
    1b36:	89 e1       	ldi	r24, 0x19	; 25
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	9e a7       	std	Y+46, r25	; 0x2e
    1b3c:	8d a7       	std	Y+45, r24	; 0x2d
    1b3e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b40:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <LCD_sendCommand+0xc0>
    1b46:	9e a7       	std	Y+46, r25	; 0x2e
    1b48:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	98 ab       	std	Y+48, r25	; 0x30
    1b52:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b54:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b56:	98 a9       	ldd	r25, Y+48	; 0x30
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	69 f7       	brne	.-38     	; 0x1b36 <LCD_sendCommand+0xb4>
    1b5c:	14 c0       	rjmp	.+40     	; 0x1b86 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b60:	7a a9       	ldd	r23, Y+50	; 0x32
    1b62:	8b a9       	ldd	r24, Y+51	; 0x33
    1b64:	9c a9       	ldd	r25, Y+52	; 0x34
    1b66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	98 ab       	std	Y+48, r25	; 0x30
    1b70:	8f a7       	std	Y+47, r24	; 0x2f
    1b72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b74:	98 a9       	ldd	r25, Y+48	; 0x30
    1b76:	9c a7       	std	Y+44, r25	; 0x2c
    1b78:	8b a7       	std	Y+43, r24	; 0x2b
    1b7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b7c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <LCD_sendCommand+0xfc>
    1b82:	9c a7       	std	Y+44, r25	; 0x2c
    1b84:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	62 e0       	ldi	r22, 0x02	; 2
    1b8a:	41 e0       	ldi	r20, 0x01	; 1
    1b8c:	0e 94 c7 08 	call	0x118e	; 0x118e <GPIO_writePin>
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	a0 e8       	ldi	r26, 0x80	; 128
    1b96:	bf e3       	ldi	r27, 0x3F	; 63
    1b98:	8f a3       	std	Y+39, r24	; 0x27
    1b9a:	98 a7       	std	Y+40, r25	; 0x28
    1b9c:	a9 a7       	std	Y+41, r26	; 0x29
    1b9e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ba2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ba4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ba6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	4a e7       	ldi	r20, 0x7A	; 122
    1bae:	53 e4       	ldi	r21, 0x43	; 67
    1bb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	8b a3       	std	Y+35, r24	; 0x23
    1bba:	9c a3       	std	Y+36, r25	; 0x24
    1bbc:	ad a3       	std	Y+37, r26	; 0x25
    1bbe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bc0:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc2:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc6:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e8       	ldi	r20, 0x80	; 128
    1bce:	5f e3       	ldi	r21, 0x3F	; 63
    1bd0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bd4:	88 23       	and	r24, r24
    1bd6:	2c f4       	brge	.+10     	; 0x1be2 <LCD_sendCommand+0x160>
		__ticks = 1;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	9a a3       	std	Y+34, r25	; 0x22
    1bde:	89 a3       	std	Y+33, r24	; 0x21
    1be0:	3f c0       	rjmp	.+126    	; 0x1c60 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1be2:	6b a1       	ldd	r22, Y+35	; 0x23
    1be4:	7c a1       	ldd	r23, Y+36	; 0x24
    1be6:	8d a1       	ldd	r24, Y+37	; 0x25
    1be8:	9e a1       	ldd	r25, Y+38	; 0x26
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	3f ef       	ldi	r19, 0xFF	; 255
    1bee:	4f e7       	ldi	r20, 0x7F	; 127
    1bf0:	57 e4       	ldi	r21, 0x47	; 71
    1bf2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bf6:	18 16       	cp	r1, r24
    1bf8:	4c f5       	brge	.+82     	; 0x1c4c <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfa:	6f a1       	ldd	r22, Y+39	; 0x27
    1bfc:	78 a5       	ldd	r23, Y+40	; 0x28
    1bfe:	89 a5       	ldd	r24, Y+41	; 0x29
    1c00:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e2       	ldi	r20, 0x20	; 32
    1c08:	51 e4       	ldi	r21, 0x41	; 65
    1c0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	bc 01       	movw	r22, r24
    1c14:	cd 01       	movw	r24, r26
    1c16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9a a3       	std	Y+34, r25	; 0x22
    1c20:	89 a3       	std	Y+33, r24	; 0x21
    1c22:	0f c0       	rjmp	.+30     	; 0x1c42 <LCD_sendCommand+0x1c0>
    1c24:	89 e1       	ldi	r24, 0x19	; 25
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	98 a3       	std	Y+32, r25	; 0x20
    1c2a:	8f 8f       	std	Y+31, r24	; 0x1f
    1c2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c2e:	98 a1       	ldd	r25, Y+32	; 0x20
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <LCD_sendCommand+0x1ae>
    1c34:	98 a3       	std	Y+32, r25	; 0x20
    1c36:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c38:	89 a1       	ldd	r24, Y+33	; 0x21
    1c3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	9a a3       	std	Y+34, r25	; 0x22
    1c40:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c42:	89 a1       	ldd	r24, Y+33	; 0x21
    1c44:	9a a1       	ldd	r25, Y+34	; 0x22
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	69 f7       	brne	.-38     	; 0x1c24 <LCD_sendCommand+0x1a2>
    1c4a:	14 c0       	rjmp	.+40     	; 0x1c74 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c50:	8d a1       	ldd	r24, Y+37	; 0x25
    1c52:	9e a1       	ldd	r25, Y+38	; 0x26
    1c54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	9a a3       	std	Y+34, r25	; 0x22
    1c5e:	89 a3       	std	Y+33, r24	; 0x21
    1c60:	89 a1       	ldd	r24, Y+33	; 0x21
    1c62:	9a a1       	ldd	r25, Y+34	; 0x22
    1c64:	9e 8f       	std	Y+30, r25	; 0x1e
    1c66:	8d 8f       	std	Y+29, r24	; 0x1d
    1c68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <LCD_sendCommand+0x1ea>
    1c70:	9e 8f       	std	Y+30, r25	; 0x1e
    1c72:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1c74:	83 e0       	ldi	r24, 0x03	; 3
    1c76:	69 ad       	ldd	r22, Y+57	; 0x39
    1c78:	0e 94 91 0a 	call	0x1522	; 0x1522 <GPIO_writePort>
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	a0 e8       	ldi	r26, 0x80	; 128
    1c82:	bf e3       	ldi	r27, 0x3F	; 63
    1c84:	89 8f       	std	Y+25, r24	; 0x19
    1c86:	9a 8f       	std	Y+26, r25	; 0x1a
    1c88:	ab 8f       	std	Y+27, r26	; 0x1b
    1c8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	4a e7       	ldi	r20, 0x7A	; 122
    1c9a:	53 e4       	ldi	r21, 0x43	; 67
    1c9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	8d 8b       	std	Y+21, r24	; 0x15
    1ca6:	9e 8b       	std	Y+22, r25	; 0x16
    1ca8:	af 8b       	std	Y+23, r26	; 0x17
    1caa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cac:	6d 89       	ldd	r22, Y+21	; 0x15
    1cae:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 e8       	ldi	r20, 0x80	; 128
    1cba:	5f e3       	ldi	r21, 0x3F	; 63
    1cbc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cc0:	88 23       	and	r24, r24
    1cc2:	2c f4       	brge	.+10     	; 0x1cce <LCD_sendCommand+0x24c>
		__ticks = 1;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	9c 8b       	std	Y+20, r25	; 0x14
    1cca:	8b 8b       	std	Y+19, r24	; 0x13
    1ccc:	3f c0       	rjmp	.+126    	; 0x1d4c <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1cce:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd0:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	3f ef       	ldi	r19, 0xFF	; 255
    1cda:	4f e7       	ldi	r20, 0x7F	; 127
    1cdc:	57 e4       	ldi	r21, 0x47	; 71
    1cde:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ce2:	18 16       	cp	r1, r24
    1ce4:	4c f5       	brge	.+82     	; 0x1d38 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ce8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e2       	ldi	r20, 0x20	; 32
    1cf4:	51 e4       	ldi	r21, 0x41	; 65
    1cf6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	bc 01       	movw	r22, r24
    1d00:	cd 01       	movw	r24, r26
    1d02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	9c 8b       	std	Y+20, r25	; 0x14
    1d0c:	8b 8b       	std	Y+19, r24	; 0x13
    1d0e:	0f c0       	rjmp	.+30     	; 0x1d2e <LCD_sendCommand+0x2ac>
    1d10:	89 e1       	ldi	r24, 0x19	; 25
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	9a 8b       	std	Y+18, r25	; 0x12
    1d16:	89 8b       	std	Y+17, r24	; 0x11
    1d18:	89 89       	ldd	r24, Y+17	; 0x11
    1d1a:	9a 89       	ldd	r25, Y+18	; 0x12
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <LCD_sendCommand+0x29a>
    1d20:	9a 8b       	std	Y+18, r25	; 0x12
    1d22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d24:	8b 89       	ldd	r24, Y+19	; 0x13
    1d26:	9c 89       	ldd	r25, Y+20	; 0x14
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	9c 8b       	std	Y+20, r25	; 0x14
    1d2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d30:	9c 89       	ldd	r25, Y+20	; 0x14
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	69 f7       	brne	.-38     	; 0x1d10 <LCD_sendCommand+0x28e>
    1d36:	14 c0       	rjmp	.+40     	; 0x1d60 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d38:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	9c 8b       	std	Y+20, r25	; 0x14
    1d4a:	8b 8b       	std	Y+19, r24	; 0x13
    1d4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d50:	98 8b       	std	Y+16, r25	; 0x10
    1d52:	8f 87       	std	Y+15, r24	; 0x0f
    1d54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d56:	98 89       	ldd	r25, Y+16	; 0x10
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <LCD_sendCommand+0x2d6>
    1d5c:	98 8b       	std	Y+16, r25	; 0x10
    1d5e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	62 e0       	ldi	r22, 0x02	; 2
    1d64:	40 e0       	ldi	r20, 0x00	; 0
    1d66:	0e 94 c7 08 	call	0x118e	; 0x118e <GPIO_writePin>
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	a0 e8       	ldi	r26, 0x80	; 128
    1d70:	bf e3       	ldi	r27, 0x3F	; 63
    1d72:	8b 87       	std	Y+11, r24	; 0x0b
    1d74:	9c 87       	std	Y+12, r25	; 0x0c
    1d76:	ad 87       	std	Y+13, r26	; 0x0d
    1d78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	4a e7       	ldi	r20, 0x7A	; 122
    1d88:	53 e4       	ldi	r21, 0x43	; 67
    1d8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	8f 83       	std	Y+7, r24	; 0x07
    1d94:	98 87       	std	Y+8, r25	; 0x08
    1d96:	a9 87       	std	Y+9, r26	; 0x09
    1d98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9c:	78 85       	ldd	r23, Y+8	; 0x08
    1d9e:	89 85       	ldd	r24, Y+9	; 0x09
    1da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e8       	ldi	r20, 0x80	; 128
    1da8:	5f e3       	ldi	r21, 0x3F	; 63
    1daa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dae:	88 23       	and	r24, r24
    1db0:	2c f4       	brge	.+10     	; 0x1dbc <LCD_sendCommand+0x33a>
		__ticks = 1;
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	9e 83       	std	Y+6, r25	; 0x06
    1db8:	8d 83       	std	Y+5, r24	; 0x05
    1dba:	3f c0       	rjmp	.+126    	; 0x1e3a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1dbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbe:	78 85       	ldd	r23, Y+8	; 0x08
    1dc0:	89 85       	ldd	r24, Y+9	; 0x09
    1dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	3f ef       	ldi	r19, 0xFF	; 255
    1dc8:	4f e7       	ldi	r20, 0x7F	; 127
    1dca:	57 e4       	ldi	r21, 0x47	; 71
    1dcc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dd0:	18 16       	cp	r1, r24
    1dd2:	4c f5       	brge	.+82     	; 0x1e26 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e2       	ldi	r20, 0x20	; 32
    1de2:	51 e4       	ldi	r21, 0x41	; 65
    1de4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	bc 01       	movw	r22, r24
    1dee:	cd 01       	movw	r24, r26
    1df0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	9e 83       	std	Y+6, r25	; 0x06
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
    1dfc:	0f c0       	rjmp	.+30     	; 0x1e1c <LCD_sendCommand+0x39a>
    1dfe:	89 e1       	ldi	r24, 0x19	; 25
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	9c 83       	std	Y+4, r25	; 0x04
    1e04:	8b 83       	std	Y+3, r24	; 0x03
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <LCD_sendCommand+0x388>
    1e0e:	9c 83       	std	Y+4, r25	; 0x04
    1e10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e12:	8d 81       	ldd	r24, Y+5	; 0x05
    1e14:	9e 81       	ldd	r25, Y+6	; 0x06
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	9e 83       	std	Y+6, r25	; 0x06
    1e1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	69 f7       	brne	.-38     	; 0x1dfe <LCD_sendCommand+0x37c>
    1e24:	14 c0       	rjmp	.+40     	; 0x1e4e <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e26:	6f 81       	ldd	r22, Y+7	; 0x07
    1e28:	78 85       	ldd	r23, Y+8	; 0x08
    1e2a:	89 85       	ldd	r24, Y+9	; 0x09
    1e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	9e 83       	std	Y+6, r25	; 0x06
    1e38:	8d 83       	std	Y+5, r24	; 0x05
    1e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3e:	9a 83       	std	Y+2, r25	; 0x02
    1e40:	89 83       	std	Y+1, r24	; 0x01
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	9a 81       	ldd	r25, Y+2	; 0x02
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <LCD_sendCommand+0x3c4>
    1e4a:	9a 83       	std	Y+2, r25	; 0x02
    1e4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1e4e:	e9 96       	adiw	r28, 0x39	; 57
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	de bf       	out	0x3e, r29	; 62
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	cd bf       	out	0x3d, r28	; 61
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	08 95       	ret

00001e60 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	e9 97       	sbiw	r28, 0x39	; 57
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	de bf       	out	0x3e, r29	; 62
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	cd bf       	out	0x3d, r28	; 61
    1e74:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	61 e0       	ldi	r22, 0x01	; 1
    1e7a:	41 e0       	ldi	r20, 0x01	; 1
    1e7c:	0e 94 c7 08 	call	0x118e	; 0x118e <GPIO_writePin>
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	a0 e8       	ldi	r26, 0x80	; 128
    1e86:	bf e3       	ldi	r27, 0x3F	; 63
    1e88:	8d ab       	std	Y+53, r24	; 0x35
    1e8a:	9e ab       	std	Y+54, r25	; 0x36
    1e8c:	af ab       	std	Y+55, r26	; 0x37
    1e8e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e90:	6d a9       	ldd	r22, Y+53	; 0x35
    1e92:	7e a9       	ldd	r23, Y+54	; 0x36
    1e94:	8f a9       	ldd	r24, Y+55	; 0x37
    1e96:	98 ad       	ldd	r25, Y+56	; 0x38
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	4a e7       	ldi	r20, 0x7A	; 122
    1e9e:	53 e4       	ldi	r21, 0x43	; 67
    1ea0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	89 ab       	std	Y+49, r24	; 0x31
    1eaa:	9a ab       	std	Y+50, r25	; 0x32
    1eac:	ab ab       	std	Y+51, r26	; 0x33
    1eae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1eb0:	69 a9       	ldd	r22, Y+49	; 0x31
    1eb2:	7a a9       	ldd	r23, Y+50	; 0x32
    1eb4:	8b a9       	ldd	r24, Y+51	; 0x33
    1eb6:	9c a9       	ldd	r25, Y+52	; 0x34
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e8       	ldi	r20, 0x80	; 128
    1ebe:	5f e3       	ldi	r21, 0x3F	; 63
    1ec0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ec4:	88 23       	and	r24, r24
    1ec6:	2c f4       	brge	.+10     	; 0x1ed2 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	98 ab       	std	Y+48, r25	; 0x30
    1ece:	8f a7       	std	Y+47, r24	; 0x2f
    1ed0:	3f c0       	rjmp	.+126    	; 0x1f50 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1ed2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ed4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ed6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ed8:	9c a9       	ldd	r25, Y+52	; 0x34
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	3f ef       	ldi	r19, 0xFF	; 255
    1ede:	4f e7       	ldi	r20, 0x7F	; 127
    1ee0:	57 e4       	ldi	r21, 0x47	; 71
    1ee2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ee6:	18 16       	cp	r1, r24
    1ee8:	4c f5       	brge	.+82     	; 0x1f3c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eea:	6d a9       	ldd	r22, Y+53	; 0x35
    1eec:	7e a9       	ldd	r23, Y+54	; 0x36
    1eee:	8f a9       	ldd	r24, Y+55	; 0x37
    1ef0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e2       	ldi	r20, 0x20	; 32
    1ef8:	51 e4       	ldi	r21, 0x41	; 65
    1efa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	bc 01       	movw	r22, r24
    1f04:	cd 01       	movw	r24, r26
    1f06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	98 ab       	std	Y+48, r25	; 0x30
    1f10:	8f a7       	std	Y+47, r24	; 0x2f
    1f12:	0f c0       	rjmp	.+30     	; 0x1f32 <LCD_displayCharacter+0xd2>
    1f14:	89 e1       	ldi	r24, 0x19	; 25
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	9e a7       	std	Y+46, r25	; 0x2e
    1f1a:	8d a7       	std	Y+45, r24	; 0x2d
    1f1c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f1e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	f1 f7       	brne	.-4      	; 0x1f20 <LCD_displayCharacter+0xc0>
    1f24:	9e a7       	std	Y+46, r25	; 0x2e
    1f26:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f2a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	98 ab       	std	Y+48, r25	; 0x30
    1f30:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f34:	98 a9       	ldd	r25, Y+48	; 0x30
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	69 f7       	brne	.-38     	; 0x1f14 <LCD_displayCharacter+0xb4>
    1f3a:	14 c0       	rjmp	.+40     	; 0x1f64 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f3e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f40:	8b a9       	ldd	r24, Y+51	; 0x33
    1f42:	9c a9       	ldd	r25, Y+52	; 0x34
    1f44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	98 ab       	std	Y+48, r25	; 0x30
    1f4e:	8f a7       	std	Y+47, r24	; 0x2f
    1f50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f52:	98 a9       	ldd	r25, Y+48	; 0x30
    1f54:	9c a7       	std	Y+44, r25	; 0x2c
    1f56:	8b a7       	std	Y+43, r24	; 0x2b
    1f58:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f5a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	f1 f7       	brne	.-4      	; 0x1f5c <LCD_displayCharacter+0xfc>
    1f60:	9c a7       	std	Y+44, r25	; 0x2c
    1f62:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	62 e0       	ldi	r22, 0x02	; 2
    1f68:	41 e0       	ldi	r20, 0x01	; 1
    1f6a:	0e 94 c7 08 	call	0x118e	; 0x118e <GPIO_writePin>
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	a0 e8       	ldi	r26, 0x80	; 128
    1f74:	bf e3       	ldi	r27, 0x3F	; 63
    1f76:	8f a3       	std	Y+39, r24	; 0x27
    1f78:	98 a7       	std	Y+40, r25	; 0x28
    1f7a:	a9 a7       	std	Y+41, r26	; 0x29
    1f7c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7e:	6f a1       	ldd	r22, Y+39	; 0x27
    1f80:	78 a5       	ldd	r23, Y+40	; 0x28
    1f82:	89 a5       	ldd	r24, Y+41	; 0x29
    1f84:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	4a e7       	ldi	r20, 0x7A	; 122
    1f8c:	53 e4       	ldi	r21, 0x43	; 67
    1f8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	8b a3       	std	Y+35, r24	; 0x23
    1f98:	9c a3       	std	Y+36, r25	; 0x24
    1f9a:	ad a3       	std	Y+37, r26	; 0x25
    1f9c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f9e:	6b a1       	ldd	r22, Y+35	; 0x23
    1fa0:	7c a1       	ldd	r23, Y+36	; 0x24
    1fa2:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa4:	9e a1       	ldd	r25, Y+38	; 0x26
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	40 e8       	ldi	r20, 0x80	; 128
    1fac:	5f e3       	ldi	r21, 0x3F	; 63
    1fae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fb2:	88 23       	and	r24, r24
    1fb4:	2c f4       	brge	.+10     	; 0x1fc0 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	9a a3       	std	Y+34, r25	; 0x22
    1fbc:	89 a3       	std	Y+33, r24	; 0x21
    1fbe:	3f c0       	rjmp	.+126    	; 0x203e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1fc0:	6b a1       	ldd	r22, Y+35	; 0x23
    1fc2:	7c a1       	ldd	r23, Y+36	; 0x24
    1fc4:	8d a1       	ldd	r24, Y+37	; 0x25
    1fc6:	9e a1       	ldd	r25, Y+38	; 0x26
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	3f ef       	ldi	r19, 0xFF	; 255
    1fcc:	4f e7       	ldi	r20, 0x7F	; 127
    1fce:	57 e4       	ldi	r21, 0x47	; 71
    1fd0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fd4:	18 16       	cp	r1, r24
    1fd6:	4c f5       	brge	.+82     	; 0x202a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd8:	6f a1       	ldd	r22, Y+39	; 0x27
    1fda:	78 a5       	ldd	r23, Y+40	; 0x28
    1fdc:	89 a5       	ldd	r24, Y+41	; 0x29
    1fde:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e2       	ldi	r20, 0x20	; 32
    1fe6:	51 e4       	ldi	r21, 0x41	; 65
    1fe8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	bc 01       	movw	r22, r24
    1ff2:	cd 01       	movw	r24, r26
    1ff4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	9a a3       	std	Y+34, r25	; 0x22
    1ffe:	89 a3       	std	Y+33, r24	; 0x21
    2000:	0f c0       	rjmp	.+30     	; 0x2020 <LCD_displayCharacter+0x1c0>
    2002:	89 e1       	ldi	r24, 0x19	; 25
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	98 a3       	std	Y+32, r25	; 0x20
    2008:	8f 8f       	std	Y+31, r24	; 0x1f
    200a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    200c:	98 a1       	ldd	r25, Y+32	; 0x20
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	f1 f7       	brne	.-4      	; 0x200e <LCD_displayCharacter+0x1ae>
    2012:	98 a3       	std	Y+32, r25	; 0x20
    2014:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2016:	89 a1       	ldd	r24, Y+33	; 0x21
    2018:	9a a1       	ldd	r25, Y+34	; 0x22
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	9a a3       	std	Y+34, r25	; 0x22
    201e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2020:	89 a1       	ldd	r24, Y+33	; 0x21
    2022:	9a a1       	ldd	r25, Y+34	; 0x22
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	69 f7       	brne	.-38     	; 0x2002 <LCD_displayCharacter+0x1a2>
    2028:	14 c0       	rjmp	.+40     	; 0x2052 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202a:	6b a1       	ldd	r22, Y+35	; 0x23
    202c:	7c a1       	ldd	r23, Y+36	; 0x24
    202e:	8d a1       	ldd	r24, Y+37	; 0x25
    2030:	9e a1       	ldd	r25, Y+38	; 0x26
    2032:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	9a a3       	std	Y+34, r25	; 0x22
    203c:	89 a3       	std	Y+33, r24	; 0x21
    203e:	89 a1       	ldd	r24, Y+33	; 0x21
    2040:	9a a1       	ldd	r25, Y+34	; 0x22
    2042:	9e 8f       	std	Y+30, r25	; 0x1e
    2044:	8d 8f       	std	Y+29, r24	; 0x1d
    2046:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2048:	9e 8d       	ldd	r25, Y+30	; 0x1e
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	f1 f7       	brne	.-4      	; 0x204a <LCD_displayCharacter+0x1ea>
    204e:	9e 8f       	std	Y+30, r25	; 0x1e
    2050:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2052:	83 e0       	ldi	r24, 0x03	; 3
    2054:	69 ad       	ldd	r22, Y+57	; 0x39
    2056:	0e 94 91 0a 	call	0x1522	; 0x1522 <GPIO_writePort>
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	a0 e8       	ldi	r26, 0x80	; 128
    2060:	bf e3       	ldi	r27, 0x3F	; 63
    2062:	89 8f       	std	Y+25, r24	; 0x19
    2064:	9a 8f       	std	Y+26, r25	; 0x1a
    2066:	ab 8f       	std	Y+27, r26	; 0x1b
    2068:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206a:	69 8d       	ldd	r22, Y+25	; 0x19
    206c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    206e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2070:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	4a e7       	ldi	r20, 0x7A	; 122
    2078:	53 e4       	ldi	r21, 0x43	; 67
    207a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	8d 8b       	std	Y+21, r24	; 0x15
    2084:	9e 8b       	std	Y+22, r25	; 0x16
    2086:	af 8b       	std	Y+23, r26	; 0x17
    2088:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    208a:	6d 89       	ldd	r22, Y+21	; 0x15
    208c:	7e 89       	ldd	r23, Y+22	; 0x16
    208e:	8f 89       	ldd	r24, Y+23	; 0x17
    2090:	98 8d       	ldd	r25, Y+24	; 0x18
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	40 e8       	ldi	r20, 0x80	; 128
    2098:	5f e3       	ldi	r21, 0x3F	; 63
    209a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    209e:	88 23       	and	r24, r24
    20a0:	2c f4       	brge	.+10     	; 0x20ac <LCD_displayCharacter+0x24c>
		__ticks = 1;
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	9c 8b       	std	Y+20, r25	; 0x14
    20a8:	8b 8b       	std	Y+19, r24	; 0x13
    20aa:	3f c0       	rjmp	.+126    	; 0x212a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    20ac:	6d 89       	ldd	r22, Y+21	; 0x15
    20ae:	7e 89       	ldd	r23, Y+22	; 0x16
    20b0:	8f 89       	ldd	r24, Y+23	; 0x17
    20b2:	98 8d       	ldd	r25, Y+24	; 0x18
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	3f ef       	ldi	r19, 0xFF	; 255
    20b8:	4f e7       	ldi	r20, 0x7F	; 127
    20ba:	57 e4       	ldi	r21, 0x47	; 71
    20bc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20c0:	18 16       	cp	r1, r24
    20c2:	4c f5       	brge	.+82     	; 0x2116 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c4:	69 8d       	ldd	r22, Y+25	; 0x19
    20c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e2       	ldi	r20, 0x20	; 32
    20d2:	51 e4       	ldi	r21, 0x41	; 65
    20d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	bc 01       	movw	r22, r24
    20de:	cd 01       	movw	r24, r26
    20e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	9c 8b       	std	Y+20, r25	; 0x14
    20ea:	8b 8b       	std	Y+19, r24	; 0x13
    20ec:	0f c0       	rjmp	.+30     	; 0x210c <LCD_displayCharacter+0x2ac>
    20ee:	89 e1       	ldi	r24, 0x19	; 25
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	9a 8b       	std	Y+18, r25	; 0x12
    20f4:	89 8b       	std	Y+17, r24	; 0x11
    20f6:	89 89       	ldd	r24, Y+17	; 0x11
    20f8:	9a 89       	ldd	r25, Y+18	; 0x12
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <LCD_displayCharacter+0x29a>
    20fe:	9a 8b       	std	Y+18, r25	; 0x12
    2100:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2102:	8b 89       	ldd	r24, Y+19	; 0x13
    2104:	9c 89       	ldd	r25, Y+20	; 0x14
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	9c 8b       	std	Y+20, r25	; 0x14
    210a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210c:	8b 89       	ldd	r24, Y+19	; 0x13
    210e:	9c 89       	ldd	r25, Y+20	; 0x14
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	69 f7       	brne	.-38     	; 0x20ee <LCD_displayCharacter+0x28e>
    2114:	14 c0       	rjmp	.+40     	; 0x213e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2116:	6d 89       	ldd	r22, Y+21	; 0x15
    2118:	7e 89       	ldd	r23, Y+22	; 0x16
    211a:	8f 89       	ldd	r24, Y+23	; 0x17
    211c:	98 8d       	ldd	r25, Y+24	; 0x18
    211e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	9c 8b       	std	Y+20, r25	; 0x14
    2128:	8b 8b       	std	Y+19, r24	; 0x13
    212a:	8b 89       	ldd	r24, Y+19	; 0x13
    212c:	9c 89       	ldd	r25, Y+20	; 0x14
    212e:	98 8b       	std	Y+16, r25	; 0x10
    2130:	8f 87       	std	Y+15, r24	; 0x0f
    2132:	8f 85       	ldd	r24, Y+15	; 0x0f
    2134:	98 89       	ldd	r25, Y+16	; 0x10
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	f1 f7       	brne	.-4      	; 0x2136 <LCD_displayCharacter+0x2d6>
    213a:	98 8b       	std	Y+16, r25	; 0x10
    213c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	62 e0       	ldi	r22, 0x02	; 2
    2142:	40 e0       	ldi	r20, 0x00	; 0
    2144:	0e 94 c7 08 	call	0x118e	; 0x118e <GPIO_writePin>
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	a0 e8       	ldi	r26, 0x80	; 128
    214e:	bf e3       	ldi	r27, 0x3F	; 63
    2150:	8b 87       	std	Y+11, r24	; 0x0b
    2152:	9c 87       	std	Y+12, r25	; 0x0c
    2154:	ad 87       	std	Y+13, r26	; 0x0d
    2156:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2158:	6b 85       	ldd	r22, Y+11	; 0x0b
    215a:	7c 85       	ldd	r23, Y+12	; 0x0c
    215c:	8d 85       	ldd	r24, Y+13	; 0x0d
    215e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	4a e7       	ldi	r20, 0x7A	; 122
    2166:	53 e4       	ldi	r21, 0x43	; 67
    2168:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	8f 83       	std	Y+7, r24	; 0x07
    2172:	98 87       	std	Y+8, r25	; 0x08
    2174:	a9 87       	std	Y+9, r26	; 0x09
    2176:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2178:	6f 81       	ldd	r22, Y+7	; 0x07
    217a:	78 85       	ldd	r23, Y+8	; 0x08
    217c:	89 85       	ldd	r24, Y+9	; 0x09
    217e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e8       	ldi	r20, 0x80	; 128
    2186:	5f e3       	ldi	r21, 0x3F	; 63
    2188:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    218c:	88 23       	and	r24, r24
    218e:	2c f4       	brge	.+10     	; 0x219a <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	9e 83       	std	Y+6, r25	; 0x06
    2196:	8d 83       	std	Y+5, r24	; 0x05
    2198:	3f c0       	rjmp	.+126    	; 0x2218 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    219a:	6f 81       	ldd	r22, Y+7	; 0x07
    219c:	78 85       	ldd	r23, Y+8	; 0x08
    219e:	89 85       	ldd	r24, Y+9	; 0x09
    21a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	3f ef       	ldi	r19, 0xFF	; 255
    21a6:	4f e7       	ldi	r20, 0x7F	; 127
    21a8:	57 e4       	ldi	r21, 0x47	; 71
    21aa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21ae:	18 16       	cp	r1, r24
    21b0:	4c f5       	brge	.+82     	; 0x2204 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e2       	ldi	r20, 0x20	; 32
    21c0:	51 e4       	ldi	r21, 0x41	; 65
    21c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	bc 01       	movw	r22, r24
    21cc:	cd 01       	movw	r24, r26
    21ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	9e 83       	std	Y+6, r25	; 0x06
    21d8:	8d 83       	std	Y+5, r24	; 0x05
    21da:	0f c0       	rjmp	.+30     	; 0x21fa <LCD_displayCharacter+0x39a>
    21dc:	89 e1       	ldi	r24, 0x19	; 25
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	9c 83       	std	Y+4, r25	; 0x04
    21e2:	8b 83       	std	Y+3, r24	; 0x03
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	9c 81       	ldd	r25, Y+4	; 0x04
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <LCD_displayCharacter+0x388>
    21ec:	9c 83       	std	Y+4, r25	; 0x04
    21ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f0:	8d 81       	ldd	r24, Y+5	; 0x05
    21f2:	9e 81       	ldd	r25, Y+6	; 0x06
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fa:	8d 81       	ldd	r24, Y+5	; 0x05
    21fc:	9e 81       	ldd	r25, Y+6	; 0x06
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	69 f7       	brne	.-38     	; 0x21dc <LCD_displayCharacter+0x37c>
    2202:	14 c0       	rjmp	.+40     	; 0x222c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2204:	6f 81       	ldd	r22, Y+7	; 0x07
    2206:	78 85       	ldd	r23, Y+8	; 0x08
    2208:	89 85       	ldd	r24, Y+9	; 0x09
    220a:	9a 85       	ldd	r25, Y+10	; 0x0a
    220c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9e 83       	std	Y+6, r25	; 0x06
    2216:	8d 83       	std	Y+5, r24	; 0x05
    2218:	8d 81       	ldd	r24, Y+5	; 0x05
    221a:	9e 81       	ldd	r25, Y+6	; 0x06
    221c:	9a 83       	std	Y+2, r25	; 0x02
    221e:	89 83       	std	Y+1, r24	; 0x01
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	9a 81       	ldd	r25, Y+2	; 0x02
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <LCD_displayCharacter+0x3c4>
    2228:	9a 83       	std	Y+2, r25	; 0x02
    222a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    222c:	e9 96       	adiw	r28, 0x39	; 57
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	00 d0       	rcall	.+0      	; 0x2244 <LCD_displayString+0x6>
    2244:	0f 92       	push	r0
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    224a:	9b 83       	std	Y+3, r25	; 0x03
    224c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    224e:	19 82       	std	Y+1, r1	; 0x01
    2250:	0e c0       	rjmp	.+28     	; 0x226e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	8a 81       	ldd	r24, Y+2	; 0x02
    225a:	9b 81       	ldd	r25, Y+3	; 0x03
    225c:	fc 01       	movw	r30, r24
    225e:	e2 0f       	add	r30, r18
    2260:	f3 1f       	adc	r31, r19
    2262:	80 81       	ld	r24, Z
    2264:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <LCD_displayCharacter>
		i++;
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	8f 5f       	subi	r24, 0xFF	; 255
    226c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	28 2f       	mov	r18, r24
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	8a 81       	ldd	r24, Y+2	; 0x02
    2276:	9b 81       	ldd	r25, Y+3	; 0x03
    2278:	fc 01       	movw	r30, r24
    227a:	e2 0f       	add	r30, r18
    227c:	f3 1f       	adc	r31, r19
    227e:	80 81       	ld	r24, Z
    2280:	88 23       	and	r24, r24
    2282:	39 f7       	brne	.-50     	; 0x2252 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	00 d0       	rcall	.+0      	; 0x2296 <LCD_moveCursor+0x6>
    2296:	00 d0       	rcall	.+0      	; 0x2298 <LCD_moveCursor+0x8>
    2298:	0f 92       	push	r0
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	8a 83       	std	Y+2, r24	; 0x02
    22a0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    22a2:	8a 81       	ldd	r24, Y+2	; 0x02
    22a4:	28 2f       	mov	r18, r24
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	3d 83       	std	Y+5, r19	; 0x05
    22aa:	2c 83       	std	Y+4, r18	; 0x04
    22ac:	8c 81       	ldd	r24, Y+4	; 0x04
    22ae:	9d 81       	ldd	r25, Y+5	; 0x05
    22b0:	81 30       	cpi	r24, 0x01	; 1
    22b2:	91 05       	cpc	r25, r1
    22b4:	c1 f0       	breq	.+48     	; 0x22e6 <LCD_moveCursor+0x56>
    22b6:	2c 81       	ldd	r18, Y+4	; 0x04
    22b8:	3d 81       	ldd	r19, Y+5	; 0x05
    22ba:	22 30       	cpi	r18, 0x02	; 2
    22bc:	31 05       	cpc	r19, r1
    22be:	2c f4       	brge	.+10     	; 0x22ca <LCD_moveCursor+0x3a>
    22c0:	8c 81       	ldd	r24, Y+4	; 0x04
    22c2:	9d 81       	ldd	r25, Y+5	; 0x05
    22c4:	00 97       	sbiw	r24, 0x00	; 0
    22c6:	61 f0       	breq	.+24     	; 0x22e0 <LCD_moveCursor+0x50>
    22c8:	19 c0       	rjmp	.+50     	; 0x22fc <LCD_moveCursor+0x6c>
    22ca:	2c 81       	ldd	r18, Y+4	; 0x04
    22cc:	3d 81       	ldd	r19, Y+5	; 0x05
    22ce:	22 30       	cpi	r18, 0x02	; 2
    22d0:	31 05       	cpc	r19, r1
    22d2:	69 f0       	breq	.+26     	; 0x22ee <LCD_moveCursor+0x5e>
    22d4:	8c 81       	ldd	r24, Y+4	; 0x04
    22d6:	9d 81       	ldd	r25, Y+5	; 0x05
    22d8:	83 30       	cpi	r24, 0x03	; 3
    22da:	91 05       	cpc	r25, r1
    22dc:	61 f0       	breq	.+24     	; 0x22f6 <LCD_moveCursor+0x66>
    22de:	0e c0       	rjmp	.+28     	; 0x22fc <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	89 83       	std	Y+1, r24	; 0x01
    22e4:	0b c0       	rjmp	.+22     	; 0x22fc <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	80 5c       	subi	r24, 0xC0	; 192
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	07 c0       	rjmp	.+14     	; 0x22fc <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    22ee:	8b 81       	ldd	r24, Y+3	; 0x03
    22f0:	80 5f       	subi	r24, 0xF0	; 240
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	03 c0       	rjmp	.+6      	; 0x22fc <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	80 5b       	subi	r24, 0xB0	; 176
    22fa:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	80 68       	ori	r24, 0x80	; 128
    2300:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_sendCommand>
}
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	00 d0       	rcall	.+0      	; 0x231a <LCD_displayStringRowColumn+0x6>
    231a:	00 d0       	rcall	.+0      	; 0x231c <LCD_displayStringRowColumn+0x8>
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
    2320:	89 83       	std	Y+1, r24	; 0x01
    2322:	6a 83       	std	Y+2, r22	; 0x02
    2324:	5c 83       	std	Y+4, r21	; 0x04
    2326:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	6a 81       	ldd	r22, Y+2	; 0x02
    232c:	0e 94 48 11 	call	0x2290	; 0x2290 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	9c 81       	ldd	r25, Y+4	; 0x04
    2334:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_displayString>
}
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	08 95       	ret

00002346 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2346:	df 93       	push	r29
    2348:	cf 93       	push	r28
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
    234e:	62 97       	sbiw	r28, 0x12	; 18
    2350:	0f b6       	in	r0, 0x3f	; 63
    2352:	f8 94       	cli
    2354:	de bf       	out	0x3e, r29	; 62
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	cd bf       	out	0x3d, r28	; 61
    235a:	9a 8b       	std	Y+18, r25	; 0x12
    235c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    235e:	89 89       	ldd	r24, Y+17	; 0x11
    2360:	9a 89       	ldd	r25, Y+18	; 0x12
    2362:	9e 01       	movw	r18, r28
    2364:	2f 5f       	subi	r18, 0xFF	; 255
    2366:	3f 4f       	sbci	r19, 0xFF	; 255
    2368:	b9 01       	movw	r22, r18
    236a:	4a e0       	ldi	r20, 0x0A	; 10
    236c:	50 e0       	ldi	r21, 0x00	; 0
    236e:	0e 94 1b 12 	call	0x2436	; 0x2436 <itoa>
   LCD_displayString(buff); /* Display the string */
    2372:	ce 01       	movw	r24, r28
    2374:	01 96       	adiw	r24, 0x01	; 1
    2376:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_displayString>
}
    237a:	62 96       	adiw	r28, 0x12	; 18
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	cf 91       	pop	r28
    2388:	df 91       	pop	r29
    238a:	08 95       	ret

0000238c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_sendCommand>
}
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	08 95       	ret

000023a0 <__udivmodhi4>:
    23a0:	aa 1b       	sub	r26, r26
    23a2:	bb 1b       	sub	r27, r27
    23a4:	51 e1       	ldi	r21, 0x11	; 17
    23a6:	07 c0       	rjmp	.+14     	; 0x23b6 <__udivmodhi4_ep>

000023a8 <__udivmodhi4_loop>:
    23a8:	aa 1f       	adc	r26, r26
    23aa:	bb 1f       	adc	r27, r27
    23ac:	a6 17       	cp	r26, r22
    23ae:	b7 07       	cpc	r27, r23
    23b0:	10 f0       	brcs	.+4      	; 0x23b6 <__udivmodhi4_ep>
    23b2:	a6 1b       	sub	r26, r22
    23b4:	b7 0b       	sbc	r27, r23

000023b6 <__udivmodhi4_ep>:
    23b6:	88 1f       	adc	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	5a 95       	dec	r21
    23bc:	a9 f7       	brne	.-22     	; 0x23a8 <__udivmodhi4_loop>
    23be:	80 95       	com	r24
    23c0:	90 95       	com	r25
    23c2:	bc 01       	movw	r22, r24
    23c4:	cd 01       	movw	r24, r26
    23c6:	08 95       	ret

000023c8 <__prologue_saves__>:
    23c8:	2f 92       	push	r2
    23ca:	3f 92       	push	r3
    23cc:	4f 92       	push	r4
    23ce:	5f 92       	push	r5
    23d0:	6f 92       	push	r6
    23d2:	7f 92       	push	r7
    23d4:	8f 92       	push	r8
    23d6:	9f 92       	push	r9
    23d8:	af 92       	push	r10
    23da:	bf 92       	push	r11
    23dc:	cf 92       	push	r12
    23de:	df 92       	push	r13
    23e0:	ef 92       	push	r14
    23e2:	ff 92       	push	r15
    23e4:	0f 93       	push	r16
    23e6:	1f 93       	push	r17
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	ca 1b       	sub	r28, r26
    23f2:	db 0b       	sbc	r29, r27
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	f8 94       	cli
    23f8:	de bf       	out	0x3e, r29	; 62
    23fa:	0f be       	out	0x3f, r0	; 63
    23fc:	cd bf       	out	0x3d, r28	; 61
    23fe:	09 94       	ijmp

00002400 <__epilogue_restores__>:
    2400:	2a 88       	ldd	r2, Y+18	; 0x12
    2402:	39 88       	ldd	r3, Y+17	; 0x11
    2404:	48 88       	ldd	r4, Y+16	; 0x10
    2406:	5f 84       	ldd	r5, Y+15	; 0x0f
    2408:	6e 84       	ldd	r6, Y+14	; 0x0e
    240a:	7d 84       	ldd	r7, Y+13	; 0x0d
    240c:	8c 84       	ldd	r8, Y+12	; 0x0c
    240e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2410:	aa 84       	ldd	r10, Y+10	; 0x0a
    2412:	b9 84       	ldd	r11, Y+9	; 0x09
    2414:	c8 84       	ldd	r12, Y+8	; 0x08
    2416:	df 80       	ldd	r13, Y+7	; 0x07
    2418:	ee 80       	ldd	r14, Y+6	; 0x06
    241a:	fd 80       	ldd	r15, Y+5	; 0x05
    241c:	0c 81       	ldd	r16, Y+4	; 0x04
    241e:	1b 81       	ldd	r17, Y+3	; 0x03
    2420:	aa 81       	ldd	r26, Y+2	; 0x02
    2422:	b9 81       	ldd	r27, Y+1	; 0x01
    2424:	ce 0f       	add	r28, r30
    2426:	d1 1d       	adc	r29, r1
    2428:	0f b6       	in	r0, 0x3f	; 63
    242a:	f8 94       	cli
    242c:	de bf       	out	0x3e, r29	; 62
    242e:	0f be       	out	0x3f, r0	; 63
    2430:	cd bf       	out	0x3d, r28	; 61
    2432:	ed 01       	movw	r28, r26
    2434:	08 95       	ret

00002436 <itoa>:
    2436:	fb 01       	movw	r30, r22
    2438:	9f 01       	movw	r18, r30
    243a:	e8 94       	clt
    243c:	42 30       	cpi	r20, 0x02	; 2
    243e:	c4 f0       	brlt	.+48     	; 0x2470 <itoa+0x3a>
    2440:	45 32       	cpi	r20, 0x25	; 37
    2442:	b4 f4       	brge	.+44     	; 0x2470 <itoa+0x3a>
    2444:	4a 30       	cpi	r20, 0x0A	; 10
    2446:	29 f4       	brne	.+10     	; 0x2452 <itoa+0x1c>
    2448:	97 fb       	bst	r25, 7
    244a:	1e f4       	brtc	.+6      	; 0x2452 <itoa+0x1c>
    244c:	90 95       	com	r25
    244e:	81 95       	neg	r24
    2450:	9f 4f       	sbci	r25, 0xFF	; 255
    2452:	64 2f       	mov	r22, r20
    2454:	77 27       	eor	r23, r23
    2456:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__udivmodhi4>
    245a:	80 5d       	subi	r24, 0xD0	; 208
    245c:	8a 33       	cpi	r24, 0x3A	; 58
    245e:	0c f0       	brlt	.+2      	; 0x2462 <itoa+0x2c>
    2460:	89 5d       	subi	r24, 0xD9	; 217
    2462:	81 93       	st	Z+, r24
    2464:	cb 01       	movw	r24, r22
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	a1 f7       	brne	.-24     	; 0x2452 <itoa+0x1c>
    246a:	16 f4       	brtc	.+4      	; 0x2470 <itoa+0x3a>
    246c:	5d e2       	ldi	r21, 0x2D	; 45
    246e:	51 93       	st	Z+, r21
    2470:	10 82       	st	Z, r1
    2472:	c9 01       	movw	r24, r18
    2474:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <strrev>

00002478 <strrev>:
    2478:	dc 01       	movw	r26, r24
    247a:	fc 01       	movw	r30, r24
    247c:	67 2f       	mov	r22, r23
    247e:	71 91       	ld	r23, Z+
    2480:	77 23       	and	r23, r23
    2482:	e1 f7       	brne	.-8      	; 0x247c <strrev+0x4>
    2484:	32 97       	sbiw	r30, 0x02	; 2
    2486:	04 c0       	rjmp	.+8      	; 0x2490 <strrev+0x18>
    2488:	7c 91       	ld	r23, X
    248a:	6d 93       	st	X+, r22
    248c:	70 83       	st	Z, r23
    248e:	62 91       	ld	r22, -Z
    2490:	ae 17       	cp	r26, r30
    2492:	bf 07       	cpc	r27, r31
    2494:	c8 f3       	brcs	.-14     	; 0x2488 <strrev+0x10>
    2496:	08 95       	ret

00002498 <_exit>:
    2498:	f8 94       	cli

0000249a <__stop_program>:
    249a:	ff cf       	rjmp	.-2      	; 0x249a <__stop_program>
